abro_ar,archivo,m_generar_archivos_csv.py,    , , ,     with open(archivo, encoding="utf8") as archivo_completo: ,        ,         return leer(archivo_completo)















archivo_participacion_txt ,agrego,Informacion_por_desarrollador.py,















armar_csv_comentarios,lista_cuerpo,nombre_funcion,m_generar_archivos_csv.py,    ,     ,     comentario_triple = '\"\"\"',     nombre_archivo = 'comentarios.csv',     autor = "[Autor:",     ayuda = "[Ayuda:",     nombre_autor = "",     nombre_ayuda = "",     resto = []   ,     datos_comentarios = {}, ,     lista = lista_cuerpo    ,     resto = [j for j in lineas_comentadas if autor not in j and ayuda not in j],     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,     for comentarios in lineas_comentadas:,         if autor in comentarios:,             nombre_autor = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],         elif ayuda in comentarios:,             nombre_ayuda = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],             ,             datos_comentarios[nombre_funcion] = [nombre_autor,nombre_ayuda,resto],             ,     comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),     ,     modulo_csv.armo_csv(comentarios_alfabeto,nombre_archivo),     ,     return cuerpo_sin_comentarios















armar_csv_funciones,archivo,m_generar_archivos_csv.py,    ,     ,     nombre_archivo = "fuente_unico.csv",     datos = {},     ,     modulos = abro_ar(archivo),     ultima_linea_indentada = None,     for modulo in modulos:,         lineas = abro_ar(modulo),         contador_def = 0,         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) + 1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = funcion.split('(')[1].lstrip().split(')')[0],                 contador_def += 1,                 ,                 if contador_def >1:,                     linea_return = linea,                     index_final = lineas.index(linea_return),                     cuerpo = lineas[index_inicial_anterior:index_final],                     cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                     datos[nombre_funcion_anterior] = [parametros_anterior,modulo,cuerpo_sin_comment],                     contador_def = 1,                 ,             if linea.strip().startswith("return "):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo_sin_comment],                 contador_def = 0, ,             if linea.startswith("    "):,                 ultima_linea_indentada = linea, ,             if linea == lineas[len(lineas)-1]:,                 index_final = lineas.index(ultima_linea_indentada) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo_sin_comment], , , ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial_anterior = lineas.index(funcion) + 1,                 nombre_funcion_anterior = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros_anterior = funcion.split('(')[1].lstrip().split(')')[0], ,         funciones_alfabeto = ordenar_alfabeticamente(datos), ,     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo)















armar_diccionarios,,consulta_de_funciones.py,,     diccionario_fuente_unico = {},     diccionario_comentarios = {},     with open("fuente_unico.csv", "r") as fuente_unico:,         linea = fuente_unico.readline().rstrip("\n"),         while linea != "":,             datos = linea.split(","),             if len(datos) > 1:,                 nombre_funcion = datos[0],                 parametros = datos[1],                 modulo = datos[2],                 cuerpo = [datos[3] + i for i in datos[4:]],                 diccionario_fuente_unico[nombre_funcion] = [parametros, modulo, cuerpo],                 linea = fuente_unico.readline().rstrip("\n"), ,     with open("comentarios.csv", "r") as comentarios:,         linea_comentarios = comentarios.readline().rstrip("\n"),         while linea_comentarios:,             datos2 = linea_comentarios.split(","),             nombre_funcion = datos2[0],             autor = datos2[1],             ayuda = datos2[2],             lista_comentarios = datos2[3:],             diccionario_comentarios[nombre_funcion] = [autor, ayuda, lista_comentarios],             linea_comentarios = comentarios.readline().rstrip("\n"),         return diccionario_fuente_unico, diccionario_comentarios















armo_csv,Estructura_de_datos,nombre_archivo,modulo_csv.py,    ,     import merge,     if nombre_archivo.startswith("fuente_unico"):,         lista_modulos_fuente = [[]],         for clave in Estructura_de_datos:, ,             nombre_funcion = clave[0],             parametros = clave[1][0],             modulo = clave[1][1],             cuerpo = clave[1][2], ,             funcion = "\n".join(cuerpo), ,             funcion = ", ".join(cuerpo),             archivo_a_escribir = nombre_archivo + "_" + modulo + ".csv",             ya_esta = 0,             index = 0,             while ya_esta == 0 and index <= len(lista_modulos_fuente[0]) - 1:,                 if lista_modulos_fuente[0][index] == archivo_a_escribir:,                     ya_esta = 1,                 index += 1,             if ya_esta == 0:,                 lista_modulos_fuente[0].append(archivo_a_escribir),             with open(archivo_a_escribir, "a") as codigo:,                 codigo.write(nombre_funcion+","+parametros+","+modulo+","+funcion+"\n"),         merge.ciclar_modulos(lista_modulos_fuente),     elif nombre_archivo == 'comentarios.csv':,         















cantidad_de_espacios,nombre_funcion,Informacion_por_desarrollador.py,    ,         [Ayuda: Aquí se multiplica un espacio por un numero x,         El 8 es cantidad de caracateres que tiene una tabulacion,,         len(nom_fun) es la cantida de caracteres que tiene el nom_fun.,         Despues quiero que partir del carater 32 obtener la cant.lineas.,         Esta cuanta me asegura que el valor lineas_f este uno debajo del otro,,         multiplicando un str espacio la cantidad de veces nesesaria para cada caso. ],   ,     if 8 + len(nombre_funcion)<33:,         espacios = -1 * (8 + len(nombre_funcion) - 33),     else:,         espacios = 2, ,     return espacios  















capturo_datos,,Informacion_por_desarrollador.py,    ,     (Nombres de las funciones, autor de la funcion , lineas por funcion y,     porcentaje de lineas del autor, sobre lineas totales del trabajo. ) ], ,     informacion_deseada = {},     ,     lineas_totales_por_autor = {}, ,     total_linea = 0, ,     with open("comentarios.csv","rt") as archivo_comentarios:,         ,         linea_archivos_comentarios = archivo_comentarios.readline(), ,         while linea_archivos_comentarios != "":,             ,             linea_a_lista_de_datos = linea_archivos_comentarios.split(","), ,             nombre_funcion = linea_a_lista_de_datos[0], ,             autor = linea_a_lista_de_datos[1].split(": ")[1].rstrip("]"), ,             informacion_deseada[nombre_funcion] = [autor,None], ,             linea_archivos_comentarios = archivo_comentarios.readline(), ,     with open ("fuente_unico.csv","rt") as archivo_fuente_unico:, ,         linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,         while linea_archivos_fuente_unico != "":, ,             linea_a_lista_de_datos = linea_archivos_fuente_unico.split(","),             ,             contador_lineas = 0, ,             funcion_actual = linea_a_lista_de_datos[0],             ,             total_linea += len(linea_a_lista_de_datos[3:]),             ,             contador_lineas = len(linea_a_lista_de_datos[3:]),             ,             for clave in informacion_deseada.keys():,                 ,                 if clave == funcion_actual:,                     informacion_deseada[clave][1] = contador_lineas,                     ,                     if informacion_deseada[clave][0] in lineas_totales_por_autor.keys():,                         lineas_totales_por_autor[informacion_deseada[clave][0]]+=contador_lineas,                     ,                     else:,                         lineas_totales_por_autor[informacion_deseada[clave][0]]=contador_lineas, ,             linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,     porcentajes ={}, ,     for clave in lineas_totales_por_autor.keys():,     ,         porcentajes[clave]=int((lineas_totales_por_autor[clave]/total_linea)*100), ,     ,     datos_finales = sorted(informacion_deseada.items(), key = lambda autor: autor[1][0]),     ,     return datos_finales,porcentajes















consultar_funciones,diccionario_fuente, diccionario_comentarios,consulta_de_funciones.py,    funcion = input("Función: "),     while funcion != "":,         nombre_funcion = funcion[1:],             if funcion.startswith("?") and funcion != "?todo":,                 print(sacar_corchetes(diccionario_comentarios[nombre_funcion][1]) + "\n" + "Parametros: " + str(diccionario_fuente[nombre_funcion][0]) + "\n" + "Modulo: " + str(diccionario_fuente[nombre_funcion][1]) + "\n" + sacar_corchetes(str(diccionario_comentarios[nombre_funcion][0]))),                 print(sacar_corchetes(str(diccionario_comentarios[nombre_funcion][0])) + "\n" + "Parametros: " + str(diccionario_fuente[nombre_funcion][0]) + "\n" + "Modulo: " + str(diccionario_fuente[nombre_funcion][1]) + "\n" + "Ayuda: " + sacar_corchetes(str(diccionario_comentarios[nombre_funcion][1])) + "\n" + "Cuerpo: " + str(diccionario_fuente[nombre_funcion][2]) + "\n" + "Comentarios: " + str(diccionario_comentarios[nombre_funcion][2])),                 for i in diccionario_fuente:,                     if i in diccionario_comentarios:,                         print("Autor: " + sacar_corchetes(diccionario_comentarios[i][0]) + "\n" + "Parametros: " + diccionario_fuente[i][0] + "\n" + "Modulo: " + diccionario_fuente[i][1] + "\n" + "Ayuda: " + sacar_corchetes(diccionario_comentarios[i][1]) + "\n" + "Cuerpo: " + str(diccionario_fuente[i][2]) + "\n" + "Comentarios: " + str(diccionario_comentarios[i][2])),                         print("\n"),             elif funcion == "imprimir ?todo":,                 pass,         else:,             print("La función especificada no existe. Por favor, ingrese una función valida"),         funcion = input("Función: "), dic_fuente, dic_comentarios, = armar_diccionarios(), 















contar_elementos_varios,lista, lista_comentarios,Panel_General.py,       [Ayuda: Crea otro diccionario que contiene la cantidad de if, while,        for, returns, break, exit y ayuda,     cantidad_elementos = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": "NO"},     j = 4,     while j < len(lista):,         if lista[j].strip().startswith("if") or lista[j].strip().startswith(,             cantidad_elementos["if"] += 1,         elif lista[j].strip().startswith("while"):,             cantidad_elementos["while"] += 1,         elif lista[j].strip().startswith("for"):,             cantidad_elementos["for"] += 1,         elif lista[j].strip().startswith("return"):,             cantidad_elementos["returns"] += 1,         elif lista[j].strip().startswith("break"):,             cantidad_elementos["break"] += 1,         elif lista[j].strip().startswith("exit"):,             cantidad_elementos["exit"] += 1,         if lista_comentarios[2].strip().startswith("[Ayuda:"):,             cantidad_elementos["ayuda"] = "SI",         j = j + 1,     return cantidad_elementos















contar_funciones,linea,contar_funciones.py,    cantidad_funciones = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": 0},     if linea.strip().startswith("if"):,         cantidad_funciones["if"] += 1,     elif linea.strip().startswith("while"):,         cantidad_funciones["while"] += 1,     elif linea.strip().startswith("for"):,         cantidad_funciones["for"] += 1,     elif linea.strip().startswith("return"):,         cantidad_funciones["returns"] += 1,     elif linea.strip().startswith("break"):,         cantidad_funciones["break"] += 1,     elif linea.strip().startswith("exit"):,         cantidad_funciones["exit"] += 1,     elif linea.strip().startswith("[Ayuda: ]"):,         cantidad_funciones["ayuda"] += 1,     return cantidad_funciones















contar_invocaciones,nombre_funcion, lista,Panel_General.py,       [Ayuda: Crea otro diccionario que contiene la cantidad de Invoca,        ciones],     i = 0,     invocaciones_dict = {"Cantidad de Invocaciones": 0},     while i < len(lista):,         j = 4,         while j < len(lista[i]):,             if nombre_funcion in lista[i][j]:,                 invocaciones_dict["Cantidad de Invocaciones"] += 1,             j = j + 1,         i = i + 1,     return invocaciones_dict















es_primo,valor,lib_matematica.py,       [Ayuda: Evlua si el numero recibido es primo o no, devolviendo True en,         caso de serlo, y False en caso contrario.], ,     devolver = True,     if valor <= 1:,         devolver = False,     else:,         divisor = 2,         while (((valor % divisor)!=0) and (divisor <= valor/2)):,             divisor += 1, ,         if divisor <= valor/2:,             devolver = False, ,         return devolver















factorial,n,lib_matematica.py,       [Ayuda: Calcula el factorial de el numero recibido, que debe ser,         mayor o igual a cero], ,     resultado = 1,     for i in range(2, n+1):,         resultado = resultado * i, ,     return resultado















generar_lista_total,dic,consulta_de_funciones.py,    lista_total = [[]],     for i in dic:,         ultima_lista = lista_total[-1],         if len(ultima_lista) < 5:,             ultima_lista.append(format(i, "<26s")),         else:,             lista_total.append([]),             ultima_lista = lista_total[-1],             ultima_lista.append(format(i, "<26s")),     if len(lista_total[-1]) < 5:,         for i in range(0, 5-len(lista_total[-1])):,             lista_total[-1].append(format(" ", "<26s")),     return lista_total















generar_txt,dict_fuente, dict_comentarios, txt,consulta_de_funciones.py,    diccionario_slices = {},     for clave in dict_fuente:,         if clave in dict_comentarios:,             indice_anterior = 0,             diccionario_slices[clave] = [],             info_imprimir = "Nombre de la función: " + clave + " " + "Parametros: " + str(dict_fuente[clave][0]) + "" + "Modulo: " + str(dict_fuente[clave][1]) + " " + "Autor: " + dict_comentarios[clave][0] + " " + "Ayuda: " + sacar_corchetes(str(dict_comentarios[clave][1])) + " " + "Cuerpo: " + str(dict_fuente[clave][2]) + " " + "Comentarios: " + str(dict_comentarios[clave][2]) + "\n\n ",             for caracter in range(len(info_imprimir)):,                 if caracter % 80 == 0:,                     diccionario_slices[clave].append(info_imprimir[indice_anterior:caracter]),                     indice_anterior = caracter,             diccionario_slices[clave].append("\n"),         else:,             pass,     with open(txt, "w") as archivo:,         for lista in diccionario_slices:,             for item in range(len(diccionario_slices[lista])):,                 archivo.write(diccionario_slices[lista][item] + "\n"), , , 















impresiones ,contenido_a_mostrar,muestro_salida.py,    , ,     print(contenido_a_mostrar), ,     return None















imprimir_funciones,listas,consulta_de_funciones.py,,     for lista in listas:,         print(lista), , 















leer,archivo,m_generar_archivos_csv.py,    ,     ,     lineas = [linea.rstrip('\n') for linea in archivo],     ,     return lineas















main,,programa_principal.py,    ,     , ,     import m_generar_archivos_csv,     txt = 'programas.txt',     m_generar_archivos_csv.armar_csv_funciones(txt),     funcionalidad = input("Ingrese la funcionalidad que quiere ver: "),     while funcionalidad != "":,         if funcionalidad == 1:,         elif funcionalidad == 2:,             import consulta_de_funciones,             consulta_de_funciones.main_consulta_funciones(),         elif funcionalidad == 3:,         elif funcionalidad == 4:,         elif funcionalidad == 5:,             import Informacion_por_desarrollador,             informacion,porcentaje = Informacion_por_desarrollador.capturo_datos(),             Informacion_por_desarrollador.participacion_info(informacion,porcentaje),         funcionalidad = input("Ingrese la funcionalidad que quiere ver: ")



main_consulta_funciones,,consulta_de_funciones.py,    print(imprimir_funciones(generar_lista_total(dic_fuente))),     generar_txt(dic_fuente, dic_comentarios, "ayuda_funciones.txt"),     acomodar_txt("ayuda_funciones.txt"),     consultar_funciones(dic_fuente, dic_comentarios)















mcd,nro_1, nro_2,lib_matematica.py,       [Ayuda: Calcula el MCD entre los dos numeros recibidos, utilizando el,         metodo de Euclides. En caso de no existir MCD, devolverá -1.], ,     if abs(nro_1) < abs(nro_2):,         menor = abs(nro_1),         mayor = abs(nro_2),     else:,         menor = abs(nro_2),         mayor = abs(nro_1), ,         devovler = -1,     elif menor == 0:,         devolver = mayor,         dividendo = mayor,         divisor = menor,         resto = mayor % divisor, ,         while resto != 0:,             dividendo = divisor,             divisor = resto,             resto = dividendo % divisor, ,         devolver = divisor, ,     return devolver















mcm,nro_1, nro_2,lib_matematica.py,       [Ayuda: Calcula el MCM (minimo comun multiplo) entre los dos numeros,         recibidos. En caso de no existir, devolverá -1.,         Para el calculo se utiliza mcm(a,b) = (a*b)/MCD(a,b)],     return (nro_1 * nro_2)//mcd(nro_1, nro_2),     















menu_MCD,,app_matematica.py,       [Ayuda: submenu de la opcion mcd],     print("\nMCD (Maximo comun divisor)"),     valor_1 = solicitar_valor("Numero 1: ", -100000, 100000 ),     valor_2 = solicitar_valor("Numero 2: ", -100000, 100000 ),     print("El MCD es: ", lib_matematica.mcd(valor_1, valor_2), "\n"), 



menu_MCM,,app_matematica.py,       [Ayuda: submenu de la opcion mcm],     print("\nMCM (Minimo comun multiplo)"),     valor_1 = solicitar_valor("Numero 1: ", -100000, 100000 ),     valor_2 = solicitar_valor("Numero 2: ", -100000, 100000 ),     print("El MCM es: ", lib_matematica.mcm(valor_1, valor_2), "\n"), 



menu_elegir,,app_matematica.py,,     menu_opciones(),     opcion = solicitar_valor("Opcion: ", 1, 6),     print("-------------------------------"),     while opcion != 6:,         if opcion == 1:,             menu_factorial(),         elif opcion == 2:,             menu_potencia(),         elif opcion == 3:,             menu_primo(),         elif opcion == 4:,             menu_MCD(),         else:,             menu_MCM(),         menu_opciones(),         opcion = solicitar_valor("Opcion: ", 1, 6),         print("-------------------------------")



menu_factorial,,app_matematica.py,       [Ayuda: submenu de la opcion factorial],     print("\nCalculo de Factorial"),     valor = solicitar_valor("Numero: ", 0, 20),     print("El factorial es: ", lib_matematica.factorial(valor), "\n"), 



menu_opciones,,app_matematica.py,       [Ayuda: Menu de opciones],     print("-------------------------------"),     print("MENU DE OPERACIONES MATEMATICAS"),     print(),     print("1. Factorial"),     print("2. Potencia"),     print("3. Primo"),     print("4. MCD (Maximo Comun Divisor)"),     print("5. MCM (Minimo Comun Multiplo)"),     print("6. Terminar"),     print(), 



menu_potencia,,app_matematica.py,       [Ayuda: submenu de la opcion Potencia],     print("\nCalculo de Potencia"),     base = solicitar_valor("Base: ", -100, 100),     exponente = solicitar_valor("Exponente: ", -100, 100),     print("La potencia es: ", lib_matematica.potencia(base, exponente), "\n"), 



menu_primo,,app_matematica.py,       [Ayuda: submenu de la opcion primo],     print("\nEvaluar Primo"),     valor = solicitar_valor("Numero: ", -100000, 100000),     print("Es Primo\n" if lib_matematica.es_primo(valor) else "No es primo\n"), 



ordenar_alfabeticamente,diccionario,m_generar_archivos_csv.py,    ,     ,     return sorted(diccionario.items(), key = lambda clave: clave[0], reverse = False)















organizar_datos,lista,Panel_General.py,       [Ayuda: Crea el diccionario inicial y contiene los campos Nombre,        de Funcion, Cantidad de Parametros, Canitdad de Lineas,     j = 0,     primeros_3 = {"Nombre de Funcion": lista[0] + lista[2], "Cantidad de Parametros": lista[1].count('('),,                   "Cantidad de Lineas": len(lista) - 3},     return primeros_3















panel_principal,,Panel_General.py,        [Ayuda: Funcion principal del panel principal, se encarga de,         tabular y unir todos los elementos,     with open('comentarios.csv', 'r') as comentarios:,         reader = csv.reader(comentarios),         lista_de_comentarios = [],         for fila in reader:,             lista_de_comentarios.append(fila),     with open('fuente_unico.csv', 'r') as file:,         reader = csv.reader(file),         lista_completa = [],         lista_final = {},         datos = [],         for row in reader:,             lista_completa.append(row),         lista1 = lista_completa,         i = 0,         while i < len(lista_completa):,             lista_final_1 = organizar_datos(lista_completa[i]),             lista_final_2 = contar_invocaciones(lista_completa[i][0], lista_completa),             lista_final_3 = contar_elementos_varios(lista_completa[i], lista_de_comentarios[i]),             lista_final.update(lista_final_1),             lista_final.update(lista_final_2),             lista_final.update(lista_final_3),             datos.append(lista_final),             lista_final = {},             i = i + 1, ,     header = datos[0].keys(),     rows = [x.values() for x in datos],     print(tabulate.tabulate(rows, header))















participacion_info ,informacion,informacion2,Informacion_por_desarrollador.py,    ,        [Ayuda: brindar datos sobre la participación de cada uno de los ,     integrantes en el desarrollo de la aplicación.,     Ademas de mostrar la informacion por pantalla,,     genera la misma salida al archivo participacion.txt ], ,     autor_anterior = None,     ,     titulo = "\n\tInforme de Desarrollo Por Autor\n",     muestro_salida.impresiones(titulo),     ,     archivo_participacion_txt(titulo),     ,     ,     for indice in range(len(informacion)):     ,         ,         nombre_funcion = informacion[indice][0],         ,         autor, lineas_funcion = informacion[indice][1], ,         porcentaje = informacion2[autor], ,         if autor_anterior == None:,             ,             s1="Autor: " + autor +"\n\n\tFuncion" + 16*" " + "Lineas"+"\n\t" + 33 * "-",             muestro_salida.impresiones(s1),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s2 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n"+s1),             archivo_participacion_txt("\n" + s2),             ,             contador_lineas_totales = 0,             ,             contador_funciones_totales = 0,             ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,             autor_anterior = autor, ,         elif autor_anterior!=autor:,             ,             s1 = "\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\n",             muestro_salida.impresiones(s1),             ,             s2 = "Autor: " + autor +"\n\n\tFuncion"+16*" "+"Lineas\n\t" + 33*"-",             muestro_salida.impresiones(s2),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s3 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s3),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n"+ s2),             archivo_participacion_txt("\n" + s3),             , ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,         else:,         ,             espacios = cantidad_de_espacios(nombre_funcion),             s1 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s1),             ,             archivo_participacion_txt("\n" + s1),             , ,         contador_lineas_totales += int(lineas_funcion), ,         contador_funciones_totales += 1, ,         contador_funciones += 1, ,         contador_lineas += int(lineas_funcion), ,         autor_anterior = autor, ,         if indice == len(informacion)-1 :,             ,             s1="\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje)+"%\n\n",             muestro_salida.impresiones(s1),             s2="Total: "+ str(contador_funciones_totales) + " Funciones - lineas\t " + str(contador_lineas_totales)+"\n",             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n"+s1),             archivo_participacion_txt("\n"+s2)            ,     ,     , 















potencia,base, exponente,lib_matematica.py,















sacar_corchetes,cadena,consulta_de_funciones.py,    if cadena.endswith(" "):,         sin_corchetes = cadena.lstrip("[").rstrip("] "),     else:,         sin_corchetes = cadena.lstrip("[").rstrip("]"),     return sin_corchetes















solicitar_valor,mensaje, minimo, maximo,app_matematica.py,       [Ayuda: Solicitar el ingreso de un valor y devolverlo, asegurando que,         estara entre el minimo y el maximo pasado por parametro],     valor = input(mensaje),     while (not valor.isdigit()) or ((int(valor) < minimo) or (int(valor) > maximo)):,         print("Error: Valor debe estar entre", minimo, "y", maximo),         valor = input(mensaje),         ,     return int(valor)



