ordenar_alfabeticamente,diccionario,m_generar_archivos_csv.py,    ,     return sorted(diccionario.items(),key = lambda clave: clave[0], reverse = True)
main,,programa_principal.py,    m_generar_archivos_csv.armar_csv_funciones(txt),     return None
leer,archivo,m_generar_archivos_csv.py,    ,     lineas = [linea.rstrip('\n') for linea in archivo],     return lineas
contar_funciones,linea,contar_funciones.py,    cantidad_funciones = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": 0},     if linea.strip().startswith("if"):,         cantidad_funciones["if"] += 1,     elif linea.strip().startswith("while"):,         cantidad_funciones["while"] += 1,     elif linea.strip().startswith("for"):,         cantidad_funciones["for"] += 1,     elif linea.strip().startswith("return"):,         cantidad_funciones["returns"] += 1,     elif linea.strip().startswith("break"):,         cantidad_funciones["break"] += 1,     elif linea.strip().startswith("exit"):,         cantidad_funciones["exit"] += 1,     elif linea.strip().startswith("[Ayuda: ]"):,         cantidad_funciones["ayuda"] += 1,     return cantidad_funciones
armar_csv_funciones,archivo,m_generar_archivos_csv.py,    nombre_archivo = "fuente_unico.csv",     datos = {},     modulos = abro_ar(archivo),     ,     for modulo in modulos:,         lineas = abro_ar(modulo), ,         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) +1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = funcion.split('(')[1].lstrip().split(')')[0], ,             elif linea.strip().startswith('return'):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo_sin_comment], ,     funciones_alfabeto = ordenar_alfabeticamente(datos),   ,     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo)
armar_csv_comentarios,lista_cuerpo,nombre_funcion,m_generar_archivos_csv.py,    ,     comentario_triple = '\"\"\"',     nombre_archivo = 'comentarios.csv',     autor = "[Autor:",     ayuda = "[Ayuda:",     nombre_autor = "",     nombre_ayuda = "",     resto = []   ,     datos_comentarios = {}, ,     lista = lista_cuerpo    ,     resto = [j for j in lineas_comentadas if autor not in j and ayuda not in j],     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,     for comentarios in lineas_comentadas:,         if autor in comentarios:,             nombre_autor = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],         elif ayuda in comentarios:,             nombre_ayuda = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],             ,             datos_comentarios[nombre_funcion] = [nombre_autor,nombre_ayuda,resto],             ,     comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),     ,     modulo_csv.armo_csv(comentarios_alfabeto,nombre_archivo),     ,     return cuerpo_sin_comentarios
abro_ar,archivo,m_generar_archivos_csv.py,    ,     with open(archivo) as archivo_completo:,         return leer(archivo_completo)
