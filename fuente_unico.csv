participacion_info ,informacion,informacion2,Informacion_por_desarrollador.py,    ,     integrantes en el desarrollo de la aplicación.,     Ademas de mostrar la informacion por pantalla,, ,     autor_anterior = None,     total_funciones = 0,     muestro_salida.impresiones("\n\tInforme de Desarrollo Por Autor\n"),     ,     ,     archivo_participacion_txt("\n\tInforme de Desarrollo Por Autor\n"),     ,     ,     for indice in range(len(informacion)):     ,         ,         nombre_funcion = informacion[indice][0],         ,         autor, lineas_funcion = informacion[indice][1], ,         porcentaje = informacion2[autor], ,         total_funciones += 1, ,         if autor_anterior == None:, ,             muestro_salida.impresiones("Autor: " + autor +"\n\n\tFuncion\t\t\tLineas\n\t---------------------------------"),             ,             espacios = 8 + len(nombre_funcion) - 32,             espacios1 = " "*(-1*espacios),             muestro_salida.impresiones("\t" + nombre_funcion + espacios1 + str(lineas_funcion)),             ,             ,             archivo_participacion_txt("\nAutor: " + autor +"\n\n\tFuncion\t\t\tLineas\n\t---------------------------------"),             archivo_participacion_txt("\n\t" + nombre_funcion + espacios1 + str(lineas_funcion)),             , ,             contador_lineas_totales = 0,             ,             contador_funciones_totales = 0,             ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,             autor_anterior = autor, ,         elif autor_anterior!=autor:,             ,             muestro_salida.impresiones("\t"+str(contador_funciones) + " Funciones - Lineas\t" + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\n"),             ,             muestro_salida.impresiones("Autor: " + autor +"\n\n\tFuncion\t\t\tLineas\n\t---------------------------------"),             ,             espacios = 8 + len(nombre_funcion) - 32,             espacios1 = " "*(-1*espacios),             muestro_salida.impresiones("\t" + nombre_funcion + espacios1 + str(lineas_funcion)),             ,             ,             archivo_participacion_txt("\n\t"+str(contador_funciones) + " Funciones - Lineas\t" + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\n"),             archivo_participacion_txt("\nAutor: " + autor +"\n\n\tFuncion\t\t\tLineas\n\t---------------------------------"),             archivo_participacion_txt("\n\t" + nombre_funcion + espacios1 + str(lineas_funcion)),             , ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,         else:,         ,             espacios = 8 + len(nombre_funcion) - 32,             espacios1 = " "*(-1*espacios),             muestro_salida.impresiones("\t" + nombre_funcion + espacios1 + str(lineas_funcion)),             ,             archivo_participacion_txt("\n\t" + nombre_funcion + espacios1 + str(lineas_funcion)),             , ,         contador_lineas_totales += int(lineas_funcion), ,         contador_funciones_totales += 1, ,         contador_funciones += 1, ,         contador_lineas += int(lineas_funcion), ,         autor_anterior = autor, ,         if indice == len(informacion)-1 :,             ,             muestro_salida.impresiones("\t"+str(contador_funciones) + " Funciones - Lineas\t" + str(contador_lineas) + "  " + str(porcentaje)+"%\n\n"),             muestro_salida.impresiones("Total: "+ str(contador_funciones_totales) + " Funciones - lineas\t" + str(contador_lineas_totales)+"\n"), ,             archivo_participacion_txt("\n\t"+str(contador_funciones) + " Funciones - Lineas\t" + str(contador_lineas) + "  " + str(porcentaje)+"%\n\n"),             archivo_participacion_txt("\nTotal: "+ str(contador_funciones_totales) + " Funciones - lineas\t" + str(contador_lineas_totales)+"\n")            ,     ,     return None
ordenar_alfabeticamente,diccionario,m_generar_archivos_csv.py,    ,     ,     return sorted(diccionario.items(), key = lambda clave: clave[0], reverse = True)
main,,programa_principal.py,    ,     ,     txt = 'programas.txt',     m_generar_archivos_csv.armar_csv_funciones(txt),     ,     ,     return None
leer,archivo,m_generar_archivos_csv.py,    ,     ,     lineas = [linea.rstrip('\n') for linea in archivo],     ,     return lineas
impresiones ,contenido_a_mostrar,muestro_salida.py,    , ,     print(contenido_a_mostrar), ,     return None
contar_funciones,linea,contar_funciones.py,    cantidad_funciones = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": 0},     if linea.strip().startswith("if"):,         cantidad_funciones["if"] += 1,     elif linea.strip().startswith("while"):,         cantidad_funciones["while"] += 1,     elif linea.strip().startswith("for"):,         cantidad_funciones["for"] += 1,     elif linea.strip().startswith("return"):,         cantidad_funciones["returns"] += 1,     elif linea.strip().startswith("break"):,         cantidad_funciones["break"] += 1,     elif linea.strip().startswith("exit"):,         cantidad_funciones["exit"] += 1,     elif linea.strip().startswith("[Ayuda: ]"):,         cantidad_funciones["ayuda"] += 1,     return cantidad_funciones
capturo_datos,,programa_principal.py,    ,     (Nombres de las funciones, autor de la funcion , lineas por funcion y, ,     info = {},     ,     lineas_totales_por_autor = {}, ,     total_linea = 0, ,     with open("comentarios.csv","rt") as ar_coment:,         ,         linea = ar_coment.readline(), ,         while linea!="":,             ,             datos = linea.split(","), ,             nombre_funcion = datos[0], ,             autor0 = datos[1], ,             autor1=autor0.split(": "), ,             autor2 = autor1[1].split("]"), ,             info[nombre_funcion]=[autor2[0],None], ,             linea = ar_coment.readline(), ,     with open ("fuente_unico.csv","rt") as ar_fuente:, ,         linea = ar_fuente.readline(), ,         while linea!="":, ,             datos = linea.split(","),             ,             contador_lineas = 0, ,             funcion_actual = datos[0],             ,             total_linea += len(datos[3:]),             ,             contador_lineas = len(datos[3:]),             ,             for clave in info.keys():,                 ,                 if clave == funcion_actual:,                     info[clave][1] = contador_lineas,                     ,                     if info[clave][0] in lineas_totales_por_autor.keys():,                         lineas_totales_por_autor[info[clave][0]]+=contador_lineas,                     ,                     else:,                         lineas_totales_por_autor[info[clave][0]]=contador_lineas, ,             linea = ar_fuente.readline(), ,     porcentajes ={}, ,     for clave in lineas_totales_por_autor.keys():,     ,         porcentajes[clave]=int((lineas_totales_por_autor[clave]/total_linea)*100), ,     ,     datos_finales = sorted(info.items(), key = lambda autor: autor[1][0]),     ,     return datos_finales,porcentajes
armo_csv,Estructura_de_datos,nombre_archivo,modulo_csv.py,    ,     ,     if nombre_archivo == 'fuente_unico.csv':,     ,         with open (nombre_archivo,"a") as codigo:,             ,             for clave in Estructura_de_datos:,                 ,                 nombre_funcion = clave[0],                 parametros = clave[1][0],                 modulo = clave[1][1],                 cuerpo = clave[1][2],                 ,                 funcion = "\n".join(cuerpo),             ,                 funcion = ", ".join(cuerpo),             ,                 codigo.write(nombre_funcion+","+parametros+","+modulo+","+funcion+"\n"),     ,     elif nombre_archivo == 'comentarios.csv':,         ,         with open (nombre_archivo,"a") as codigo:,             ,             for elementos in Estructura_de_datos:,                 ,                 nombre_funcion = elementos[0],                 nombre_autor = elementos[1][0],                 nombre_ayuda = elementos[1][1],                 resto = elementos[1][2], ,             ,                 funcion = ", ".join(resto),             ,                 codigo.write(nombre_funcion + "," + nombre_autor + "," + nombre_ayuda + "," + funcion + "\n"),     ,     return None
armar_csv_funciones,archivo,m_generar_archivos_csv.py,    ,     ,     nombre_archivo = "fuente_unico.csv",     datos = {},     ,     modulos = abro_ar(archivo),     ,     for modulo in modulos:,         lineas = abro_ar(modulo), ,         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) + 1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = funcion.split('(')[1].lstrip().split(')')[0], ,             elif linea.strip().startswith('return'):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo_sin_comment], ,     funciones_alfabeto = ordenar_alfabeticamente(datos),   ,     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo)
armar_csv_comentarios,lista_cuerpo,nombre_funcion,m_generar_archivos_csv.py,    ,     ,     comentario_triple = '\"\"\"',     nombre_archivo = 'comentarios.csv',     autor = "[Autor:",     ayuda = "[Ayuda:",     nombre_autor = "",     nombre_ayuda = "",     resto = []   ,     datos_comentarios = {}, ,     lista = lista_cuerpo    ,     resto = [j for j in lineas_comentadas if autor not in j and ayuda not in j],     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,     for comentarios in lineas_comentadas:,         if autor in comentarios:,             nombre_autor = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],         elif ayuda in comentarios:,             nombre_ayuda = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],             ,             datos_comentarios[nombre_funcion] = [nombre_autor,nombre_ayuda,resto],             ,     comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),     ,     modulo_csv.armo_csv(comentarios_alfabeto,nombre_archivo),     ,     return cuerpo_sin_comentarios
archivo_participacion_txt ,agrego,Informacion_por_desarrollador.py,
abro_ar,archivo,m_generar_archivos_csv.py,    , , ,     with open(archivo, encoding="utf8") as archivo_completo: ,        ,         return leer(archivo_completo)
