abro_ar,archivo,m_generar_archivos_csv.py,    """[Ayuda: abre un archivo]""",     ,     with open(archivo) as archivo_completo:,         return leer(archivo_completo)
armar_csv_comentarios,lista_cuerpo,nombre_funcion,m_generar_archivos_csv.py,    """[Ayuda: Remueve los comentarios de la funcion y crea el archivo comentarios.csv]""",     ,     comentario_triple = '\"\"\"',     nombre_archivo = 'comentarios.csv',     datos_comentarios = {},     lista = lista_cuerpo    ,     for linea in lista:, ,         if linea.lstrip().startswith(comentario_triple) or linea.lstrip().startswith('#'):,             ind = lista_cuerpo.index(linea),             k = lista_cuerpo.pop(ind),             nombre_ayuda  = "",             nombre_autor = "",             cuerpo = "",             if linea.lstrip().startswith(comentario_triple+"[Autor:"):,                 linea_autor = linea,                 nombre_autor = linea_autor.split('[Autor:')[1].lstrip().split(']')[0], ,             elif linea.lstrip().startswith(comentario_triple+"[Ayuda:"):,                 linea_ayuda = linea,                 nombre_ayuda = linea_ayuda.split('[Ayuda:')[1].lstrip().split(']')[0]        ,             else:,                 cuerpo = [i for i in lista if (i.lstrip().startswith('#') or i.lstrip().startswith('#'))],                 datos_comentarios[nombre_funcion] = [nombre_autor,nombre_ayuda,cuerpo] ,         alfabetico = ordenar_alfabeticamente(datos_comentarios),         return modulo_csv.armo_csv(alfabetico,nombre_archivo)       
armar_csv_funciones,archivo,m_generar_archivos_csv.py,    """[Ayuda: abre un archivo]""", ,     datos = {},     nombre_archivo = "fuente_unico.csv",     modulos = abro_ar(archivo),     for modulo in modulos:,         lineas = abro_ar(modulo),         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) +1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = funcion.split('(')[1].lstrip().split(')')[0], ,             elif linea.strip().startswith('return'):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo], ,     funciones_alfabeto = ordenar_alfabeticamente(datos), ,     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo)
contar_funciones,linea,contar_funciones.py,    cantidad_funciones = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": 0},     if linea.strip().startswith("if"):,         cantidad_funciones["if"] += 1,     elif linea.strip().startswith("while"):,         cantidad_funciones["while"] += 1,     elif linea.strip().startswith("for"):,         cantidad_funciones["for"] += 1,     elif linea.strip().startswith("return"):,         cantidad_funciones["returns"] += 1,     elif linea.strip().startswith("break"):,         cantidad_funciones["break"] += 1,     elif linea.strip().startswith("exit"):,         cantidad_funciones["exit"] += 1,     elif linea.strip().startswith("[Ayuda: ]"):,         cantidad_funciones["ayuda"] += 1,     return cantidad_funciones
leer,archivo,m_generar_archivos_csv.py,    """El comenterario tiene que ser excluido """,     #OtroComment ,     #AAA,     """[Ayuda: Lee el archivo linea por linea]""",     ,     lineas = [linea.rstrip('\n') for linea in archivo],     return lineas
main,,programa_principal.py,    m_generar_archivos_csv.armar_csv_funciones(txt),     return None
ordenar_alfabeticamente,diccionario,m_generar_archivos_csv.py,    """[Ayuda: abre un archivo]""",     ,     return sorted(diccionario.items(),key = lambda clave: clave[0], reverse = False)
