abro_ar;[Autor: Alfonso];[Ayuda: abre un archivo];   # encoding="utf8" use eso para solucionar el error.;    #El archivo informacion_por_desarollador era el que generaba ese problema,;    #aprantemente era por que tenia otro codificacion "utf8"
archivo_analizador;[Autor: Alfonso];[Ayuda: recibe un string como parametro y escribe en el archivo analizador.txt];
armar_csv_comentarios;[Autor: Alfonso];[Ayuda: Remueve los comentarios de la funcion y crea el archivo comentarios.csv];    #Declaracion de variables;     #Busco las lineas comentadas y me quedo con una lista de las lineas comentadas;     resto = [i for i in lista if '#' in i];     # Cruzo las lineas comentadas con el cuerpo de la otra funcion para devolver solo las lineas del cuerpo de la;     # funcion que no tienen comentario;     #Itero atraves de las lineas comentadas para encontrar el autor y ayuda;     #me creo el diccionario con los campos que necesito;     #datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto};     #Ordeno el diccionario, respecto sus claves;     #comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios);     #Genero el csv.;     #modulo_csv.armo_csv(comentarios_alfabeto,nombre_archivo, modulo)
armar_csv_funciones;[Autor: Dan];[Ayuda: abre un archivo];    #Declaro variables;     #Abro los modulos;     #Itero a traves de los modulos del txt;             #Busco la linea que comience por def para encontrar el nombre de la funcion, sus parametros y cuerpo;     #Ordeno el diccionario
armar_diccionarios;[Autor: Valentin];[Ayuda: Imprime la lista de funciones, y da la opción de mostrar información    acerca de cada una.];        #Ciclo a través de las lineas del archivo para añadir a un diccionario los datos de fuente unico;         #que necesito;         #Ídem comentarios
armar_tabla;[Autor: Alfonso];[Ayuda: Genera tres listas, una con el titulo, una lista de listas con cada linea y espacio, y los totales];    #Obtengo los parametros de toda la lista de funciones y un diccionario de quien invoca a quien y cuantas veces;     #Enumero la lista de todas las funciones a partir del numero 1;     #Obtengo una lista con  el numero de cada funcion;     #Calculo la maxima cantidad de funciones y le doy formato al titulo de la tabla;     #Declaro Variables;     #Recorro la lista que genera el enumerate;         #Creo una variable para llenar la tabla;         #Armo el primero campo con el numero de la funcion y su nombre;         #Genero la lista que voy a imprimir con el primer campo justificandola a 32 espacios;         #Lleno la tabla con vacios para formar una grilla validando contra el numero total de funciones;             #Genero la grilla con todos los campos por funciones;             #Reviso la lista en el cuerpo;                 #Si el nombre de la funcion esta en la lista del cuerpo;                     #Busco el numero en que fue invocada;                     #Busco el nombre de la funcion invocada;                     #Le agrego una X a la funcion que invocaron;         #Reemplazo los campos vacios por las veces que fue invocada;             #Me quedo con los valores del diccionario;                 #Calculo a cual funcion invoco basada en el numero;                 #Busca el nombre de la funcion invocada;                 #Modifico la posicion en la lista con cuantas veces lo invoco;         #Creo una lista de lista que contenga todo para calcular los totales en la matriz
armo_csv;[Autor: Dan];[Ayuda: Recibo el nombre de archivo a escribir y la estructura de datos         correspondiente, la cual viene dada por una lista de tuplas,Crea y agrega         informacion dentro del csv];            # Modelo de parametros;             # Une con una coma los elementos de la lista, en una cadena nueva.;             # Genera un nombre diferente para cada modulo, para despues hacer el merge.;             #------------------------------------------------------------------;             #------------------------------------------------------------------;             # Crea/abre el csv recibido por parametro.;                 #Escribo en el csv;         # recorro la lista de tuplas y capturo los datos deseados   ;             #Modelo de parametros;             # Une con una coma los elementos de la lista, en una cadena nueva.;             # Genera un nombre diferente para cada funcion, para despues hacer el merge.;             # Crea/abre el csv recivido por parametro.;                 #Escribo en el csv
autor_ayuda;[Autor: Alfonso];[Ayuda: Remueve los comentarios de la funcion    y crea el archivo comentarios.csv];
borrar_primer_indice;[Autor: Alfonso];[Ayuda: Borra el primer indice de una lista, acepta como parametro de entrada una lista];
borrar_un_valor_lista;[Autor: Alfonso];[Ayuda: Reemplaza un valor en especifico de una lista por vacio y retorna la lista modificada];
busco_algo_en_codigo_de;[Autor: Alejo Mariño];[Ayuda: Recibe dos funciones (strings) y un diccionario en donde se encuentren ambas funciones como claves y su        valor, el cuerpo de la funcion en una lista, devuelve el numero de veces que la funcion 1 se encuentra en el        codigo de la funcion 2];
cantidad_de_espacios;[Autor: Dan];[Ayuda: Aquí se multiplica un espacio por un numero x        El 8 es cantidad de caracateres que tiene una tabulacion,        len(nom_fun) es la cantida de caracteres que tiene el nom_fun.        Despues quiero que partir del carater 32 obtener la cant.lineas.        Esta cuanta me asegura que el valor lineas_f este uno debajo del otro,        multiplicando un str espacio la cantidad de veces nesesaria para cada caso. ];
capturo_datos;[Autor: Dan];[Ayuda: recopila los parametros para el Quinta punto        (Nombres de las funciones, autor de la funcion , lineas por funcion y        porcentaje de lineas del autor, sobre lineas totales del trabajo. ) ];    # Quiero esta informacion para sacar el porcentaje que realizo cada autor,;     #  q debe se mostrado al lado del total de lineas por autor por pantalla posteriormente.;     # De igual forma este dato lo nesesito para sacar el porsentaje que realizo cada autor q;     #  su vez debe ser mostrado este dato alfinal de la salida por pantalla acompañado de otros datos...;     # Abro comentarios csv en lectura para saber que funcion;     #  hizo cada uno de los participantes.;             # Convierte en otra variable, la linea que es un string que separa;             #  los campos con "," en una lista para poder acceder a la ;             #   informacion facilmente...;             # Primer campo tenemos el nombre de la funcion.;             # Segundo campo esta el autor de la funcion.;             # Esos dos datos los guardo en dicionario.;             # Lineas por funcion todavia no lo se pero lo llena despues de este bucle...;     # Abro a fuente unico csv para sacar cuantas lineas tiene cada una de las funciones,;     # cantidad total de lineas de codigo por autor y cantidad total de lineas en todos los .py...;     # para eso tengo que saber de que funcion estoy contando la cantida de lineas y;     # rellenar el valor en la clave corespondiente del dic informacion_deseada...;         # Lee la primera linea...;         # Si llega al final de archivo corta el bucle.;             # de igual manera genera en otra variable una lista,;             # la cual cada elemento es un campo del csv.;             # Por cada funcion inicializo el contador de lineas por fucion en cero. ;             # Se queda con el nombre de la funcion actual.;             # Para lo que ya vimos...;             # Aca sumo todas lineas de codigo,;             # que contienen todas las funciones.;             # Porque es nesesario el dato para la ultima linea de la salida...;             # Bueno ahora si tengo el dato de lineas por funcion;             # ahora solo falta rellenar la informacion en el diccionario;             # en donde corresponde como se vera en las siguientes lineas.;             # Recorro las claves del dic;                 # Si funcion actual es igual a clave..;                     # Ingreso al dic en la clave y en la clave "Lineas_por_funcion";                     #  y rellena la informacion ahora si..;                     # Si el autor es una clave en lineas_totales_por_autor.;                         # Le suma las lineas que conto en la funcion actual.;                     # De no estar el autor en las claves del dic lineas_totales_por_autor.;                         # Crea la clave que va ser el nombre del autor;                         #  y la cantidad total de lineas por autor por el momento.;             # Vuelve a leer otra linea y continua hasta no tner mas funciones en el csv.            ;     # aca saco los porcentajes de realizacion por autor;     #  y los guardo como el autor como clave del dic;     # Recorro las claves de lineas_totales_por_autor que son los autores...;         # Aca es donde gurada el porcentaje por autor ...;     # Ordeno por autores por que es la mejor manera asi no tenego que anidar bucles;     # posteriormete para hacer la salida por pantalla y la escritura del txt...
ciclar_modulos;[Autor: Valentin];[Ayuda : Recorre los modulos de las listas hasta llegar a un archivo con la información         de todos los demas];
consultar_funciones;[Autor: Valentin];[Ayuda: Pide un input de nombre de función, y en base a lo ingresado muestra, o la ayuda, comentarios,        parametros y autor de la función, o todo lo relacionado a la misma];    #Pregunto la funcion y la continuo preguntando hasta que el usuario aprete enter;         #Verifico si la funcion ingresada pertenece al diccionario o si es alguna de las funciones propuestas;         if nombre_funcion.rstrip() in diccionario_fuente or funcion == "?todo" or funcion == "#todo" or funcion == "imprimir ?todo":;             #Imprimo la funcion ingresada en base al criterio pedido(?, #);             elif funcion.startswith("#") and funcion != "#todo":;             elif funcion == "?todo" or funcion == "#todo":
contar_elementos_varios;[Autor: Luis Andrade];[Ayuda: Crea otro diccionario que contiene la cantidad de if, while       for, returns, break, exit y ayuda;                "elif"):  # cantidad de if / elif
contar_invocaciones;[Autor: Luis Andrade];[Ayuda: Crea otro diccionario que contiene la cantidad de Invoca       ciones];
correcto_espaciado;[Autor: Alfonso];[Ayuda: Modifica el espaciado de los espacios en blanco para que quede a la par cada columna despues de la decima];
depurar_lineas;[Autor: Alejo Mariño];[Ayuda: Recibe el nombre de una funcion la cual se encuentra en un determinado diccionario de la forma        previamente usada y devuelve el codigo de la funcion ingresada libre de lineas con solo tabulaciones y espacios        en forma de lista];
encontrar_main;[Autor: Alejo Mariño];[Ayuda: Recibe un diccionario de la forma previamente usada, en el que compara cada modulo hasta encontrar aquel        que sea igual al primer modulo del archivo "programas.txt", el cual deberia ser el modulo en el cual se        encuentra solo la funcion main. Una vez encontrado el modulo toma el nombre de la funcion main cualquier sea su        nombre y lo devuelve];
escribir;[Autor: Valentin];[Ayuda : Escribe el parametro linea en el parametro archivo];
escribir_imprimir ;[Autor: Dan];[Ayuda: esta fucion puede recibir en el primer parametro un dato a imprimir,        en el segundo parametro puede recibir el nombre de un archivo para que sea abierto,        en el tercer parametro de que forma o modo quiere que el archivo sea abierto y         el ultiumo parametro debe ser la linea que quiere ser escrita dentro del archivo.        Si no se quiere utilizar, ya sea la impresion o la apertura de un archivo debe        recibir el valor de None.];
formato_cuerpo;[Autor: Alfonso];[Ayuda: Le da formato a una lista para que imprima el cuerpo];
formato_tabla;[Autor: Alfonso];[Ayuda: Le da formato de tabla a una lista con espaciado y divisiones];
formato_titulo;[Autor: Alfonso];[Ayuda: Le da formato al titulo];    #Calculo la maxima cantidad de funciones;     #Formato de Titulo;     #Hay 32
generar_arbol;[Autor: Alejo Mariño];[Ayuda: Recibe una funcion (string); un indice (int); un determinado diccionario de la forma: clave = nombre de        funcion, valor = lista con los parametros de la funcion en el indice 0, el modulo en el indice 1 y cada linea        del cuerpo de la funcion a partir del indice dos; una lista con los nombres de las funciones en dicho        diccionario y genera un arbol de invocacion para la determinada funcion];
generar_lista_total;[Autor: Valentin];[Ayuda: Genera una lista de listas con los nombres de las funciones ordenadas alfabeticamente];    #Añado los nombres de funciones del diccionario a una lista de listas, para imprimir ordenado;     #Verifico si la ultima lista generada tiene menos de 5 elementos, para formatear espacios y que quede parejo
generar_totales;[Autor: Alfonso];[Ayuda: Recibe una lista y genera la lista de sumatoria de totales y la devuelve];    #Hago una lista de listas de los totales reemplazando los vacios por 0 para poder sumarlo
generar_txt;[Autor: Valentin];[Ayuda: Genera txt];
imprimir_funciones;[Autor: Valentin];[Ayuda: Imprime la lista de funciones];
la_tabla;[Autor: Alfonso];[Ayuda: Armado de la tabla para el analizador];    #Titulo;     #Cuerpo;     #Total
leer;[Autor: Alfonso];[Ayuda: Lee el archivo linea por linea];
leer_csv;[Autor: Alejo Mariño];[Ayuda: Recibe un archivo .csv y devuelve un diccionario con clave = nombre de funcion y como valor, una lista        con cada uno de los valores siendo una separacion del csv];
lista_comentarios;[Autor: Alfonso];[Ayuda: Remueve los comentarios de la funcion y crea el archivo comentarios.csv];
main;[Autor: Equipo Azul];[Ayuda: Es la funcion principal];            # Primer punto;             # Segundo punto;             #Tercer punto 3;             #Cuarto punto;             #Quinto punto
main_consulta_funciones;[Autor: Valentin];[Ayuda: Modulariza para poder llamar el modulo en el programa principal];
merge_2;[Autor: Valentin];[Ayuda : Mergea 2 archivos en 1 nuevo];
nombres_funciones;[Autor: Alejo Mariño];[Ayuda: Recibe un diccionario de la forma previamente usada y devuelve una lista con cada uno de los nombres de        las funciones en el];
ordenar_alfabeticamente;[Autor: Alfonso];[Ayuda: Ordena diccionario de mayor a menor, respecto las claves del mismo.    Devuelvo lista de tuplas];
organizar_datos;[Autor: Luis Andrade];[Ayuda: Crea el diccionario inicial y contiene los campos Nombre       de Funcion, Cantidad de Parametros, Canitdad de Lineas;
panel_principal;[Autor: Luis Andrade];[Ayuda: Funcion principal del panel principal, se encarga de        tabular y unir todos los elementos;    # Abro el archivo de comentarios;     # Abro el archivo fuente unico;         # se recorre linea a linea las listas creadas;             # actualizando los diccionarios con cada uno de los procesos por separado;             # uniendo todos los diccionarios en una lista
participacion_info ;[Autor: Dan];[Ayuda: brindar datos sobre la participación de cada uno de los         integrantes en el desarrollo de la aplicación.        Ademas de mostrar la informacion por pantalla,        genera la misma salida al archivo participacion.txt ];    #Muestro por pantalla... y Agrego linea a participacion.txt;             # Muestro por pantalla... y Agrego linea a participacion.txt;             # Muestro por pantalla... y Agrego linea a participacion.txt;             #Muestro por pantalla... y Agrego linea a participacion.txt;             #Muestro por pantalla... y   #Agrego linea a participacion.txt;             #Muestro por pantalla... y  Agrego linea a participacion.txt;             #Muestro por pantalla... y   #Agrego linea a participacion.txt;             #Muestro por pantalla... y Agrego linea a participacion.txt;             #Muestro por pantalla... y Agrego linea a participacion.txt
primer_item_lista;[Autor: Alfonso];[Ayuda: Busca el primer item de una lista, recibe una lista, y devuelve un item];
quien_invoca_a_quien;[Autor: Alfonso];[Ayuda: Genera un diccionario de quien inoca a quien,        teniendo como clave el nombre de la funcion y como valores una lista de lista con cuantas veces lo invoca,        ademas devuelve los nombres de todas las funciones del programa];    #Invoco para leer el csv y que me devuelva un diccionario;     #Declaro variables;     #Me quedo con el nombre de todas las funciones del archivo fuente_unico.csv;     #Recorre las filas del diccionario y me quedo con la clave (nombre_funcion) y el cuerpo de la funcion;         #Asigno el nombre de la funcion a la variable clave;         #Busco el cuerpo de la funcion que seria todo lo posterior al 2do campo;         #Por cada funcion en la lista de  todas las funciones itera;             #Cheque si en el cuerpo de la funcion existe el nombre de la funcion y lo anade a la lista;             #Cuenta cuantas veces ocurre que una funcion este dentro de ota ;             #Genera una lista con el nombre de la funcion invocada y cuantas veces fue invocada;             #Si ocurre al menos 1 vez;                 #Si la funcion que la invoco ya existe, agrego otra lista, en caso de que no exista, crea la clave con el nombre de la funcion invocadora;                 #Si no existe la clave me creo un nuevo campo;     #Devuelvo una lista de todas las funciones y el diccionario de quien invoca a quien       
remover_ceros;[Autor: Alfonso];[Ayuda: Reemplaza por un espacio los 0 que se encuentren en una lista];
sacar_corchetes;[Autor: Valentin];[Ayuda: Recibe como parametro una cadena y le saca los corchetes de adelante y atrás];
sumar_totales;[Autor: Alfonso];[Ayuda: Toma como parametro de entrada una lista, y genera una nueva lista sumando los valores de cada columna de la lista inicial];
