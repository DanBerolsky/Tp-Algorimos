abro_ar,archivo,m_generar_archivos_csv.py,    , , ,     with open(archivo, encoding="utf8") as archivo_completo: ,        ,         return leer(archivo_completo)

archivo_participacion_txt ,agrego,Informacion_por_desarrollador.py,

armar_csv_comentarios,lista_cuerpo,nombre_funcion,m_generar_archivos_csv.py,    ,     ,     comentario_triple = '\"\"\"',     nombre_archivo = 'comentarios.csv',     autor = "[Autor:",     ayuda = "[Ayuda:",     nombre_autor = "",     nombre_ayuda = "",     resto = []   ,     datos_comentarios = {}, ,     lista = lista_cuerpo    ,     resto = [j for j in lineas_comentadas if autor not in j and ayuda not in j],     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,     for comentarios in lineas_comentadas:,         if autor in comentarios:,             nombre_autor = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],         elif ayuda in comentarios:,             nombre_ayuda = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0],             ,             datos_comentarios[nombre_funcion] = [nombre_autor,nombre_ayuda,resto],             ,     comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),     ,     modulo_csv.armo_csv(comentarios_alfabeto,nombre_archivo),     ,     return cuerpo_sin_comentarios

armar_csv_funciones,archivo,m_generar_archivos_csv.py,    ,     ,     nombre_archivo = "fuente_unico.csv",     datos = {},     ,     modulos = abro_ar(archivo),     ultima_linea_indentada = None,     for modulo in modulos:,         lineas = abro_ar(modulo),         contador_def = 0,         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) + 1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = funcion.split('(')[1].lstrip().split(')')[0],                 contador_def += 1,                 ,                 if contador_def >1:,                     linea_return = linea,                     index_final = lineas.index(linea_return),                     cuerpo = lineas[index_inicial_anterior:index_final],                     cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                     datos[nombre_funcion_anterior] = [parametros_anterior,modulo,cuerpo_sin_comment],                     contador_def = 1,                 ,             if linea.strip().startswith("return "):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo_sin_comment],                 contador_def = 0, ,             if linea.startswith("    "):,                 ultima_linea_indentada = linea, ,             if linea == lineas[len(lineas)-1]:,                 index_final = lineas.index(ultima_linea_indentada) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment = armar_csv_comentarios(cuerpo,nombre_funcion),                 datos[nombre_funcion] = [parametros,modulo,cuerpo_sin_comment], , , ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial_anterior = lineas.index(funcion) + 1,                 nombre_funcion_anterior = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros_anterior = funcion.split('(')[1].lstrip().split(')')[0], ,         funciones_alfabeto = ordenar_alfabeticamente(datos), ,     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo)

cantidad_de_espacios,nombre_funcion,Informacion_por_desarrollador.py,    ,         [Ayuda: Aquí se multiplica un espacio por un numero x,         El 8 es cantidad de caracateres que tiene una tabulacion,,         len(nom_fun) es la cantida de caracteres que tiene el nom_fun.,         Despues quiero que partir del carater 32 obtener la cant.lineas.,         Esta cuanta me asegura que el valor lineas_f este uno debajo del otro,,         multiplicando un str espacio la cantidad de veces nesesaria para cada caso. ],   ,     if 8 + len(nombre_funcion)<33:,         espacios = -1 * (8 + len(nombre_funcion) - 33),     else:,         espacios = 2, ,     return espacios  

capturo_datos,,Informacion_por_desarrollador.py,    ,     (Nombres de las funciones, autor de la funcion , lineas por funcion y,     porcentaje de lineas del autor, sobre lineas totales del trabajo. ) ], ,     informacion_deseada = {},     ,     lineas_totales_por_autor = {}, ,     total_linea = 0, ,     with open("comentarios.csv","rt") as archivo_comentarios:,         ,         linea_archivos_comentarios = archivo_comentarios.readline(), ,         while linea_archivos_comentarios != "":,             ,             linea_a_lista_de_datos = linea_archivos_comentarios.split(","), ,             nombre_funcion = linea_a_lista_de_datos[0], ,             autor = linea_a_lista_de_datos[1].split(": ")[1].rstrip("]"), ,             informacion_deseada[nombre_funcion] = [autor,None], ,             linea_archivos_comentarios = archivo_comentarios.readline(), ,     with open ("fuente_unico.csv","rt") as archivo_fuente_unico:, ,         linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,         while linea_archivos_fuente_unico != "":, ,             linea_a_lista_de_datos = linea_archivos_fuente_unico.split(","),             ,             contador_lineas = 0, ,             funcion_actual = linea_a_lista_de_datos[0],             ,             total_linea += len(linea_a_lista_de_datos[3:]),             ,             contador_lineas = len(linea_a_lista_de_datos[3:]),             ,             for clave in informacion_deseada.keys():,                 ,                 if clave == funcion_actual:,                     informacion_deseada[clave][1] = contador_lineas,                     ,                     if informacion_deseada[clave][0] in lineas_totales_por_autor.keys():,                         lineas_totales_por_autor[informacion_deseada[clave][0]]+=contador_lineas,                     ,                     else:,                         lineas_totales_por_autor[informacion_deseada[clave][0]]=contador_lineas, ,             linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,     porcentajes ={}, ,     for clave in lineas_totales_por_autor.keys():,     ,         porcentajes[clave]=int((lineas_totales_por_autor[clave]/total_linea)*100), ,     ,     datos_finales = sorted(informacion_deseada.items(), key = lambda autor: autor[1][0]),     ,     return datos_finales,porcentajes

leer,archivo,m_generar_archivos_csv.py,    ,     ,     lineas = [linea.rstrip('\n') for linea in archivo],     ,     return lineas

ordenar_alfabeticamente,diccionario,m_generar_archivos_csv.py,    ,     ,     return sorted(diccionario.items(), key = lambda clave: clave[0], reverse = False)

participacion_info ,informacion,informacion2,Informacion_por_desarrollador.py,    ,        [Ayuda: brindar datos sobre la participación de cada uno de los ,     integrantes en el desarrollo de la aplicación.,     Ademas de mostrar la informacion por pantalla,,     genera la misma salida al archivo “participacion.txt” ], ,     autor_anterior = None,     ,     titulo = "\n\tInforme de Desarrollo Por Autor\n",     muestro_salida.impresiones(titulo),     ,     archivo_participacion_txt(titulo),     ,     ,     for indice in range(len(informacion)):     ,         ,         nombre_funcion = informacion[indice][0],         ,         autor, lineas_funcion = informacion[indice][1], ,         porcentaje = informacion2[autor], ,         if autor_anterior == None:,             ,             s1="Autor: " + autor +"\n\n\tFuncion" + 16*" " + "Lineas"+"\n\t" + 33 * "-",             muestro_salida.impresiones(s1),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s2 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n"+s1),             archivo_participacion_txt("\n" + s2),             ,             contador_lineas_totales = 0,             ,             contador_funciones_totales = 0,             ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,             autor_anterior = autor, ,         elif autor_anterior!=autor:,             ,             s1 = "\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\n",             muestro_salida.impresiones(s1),             ,             s2 = "Autor: " + autor +"\n\n\tFuncion"+16*" "+"Lineas\n\t" + 33*"-",             muestro_salida.impresiones(s2),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s3 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s3),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n"+ s2),             archivo_participacion_txt("\n" + s3),             , ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,         else:,         ,             espacios = cantidad_de_espacios(nombre_funcion),             s1 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s1),             ,             archivo_participacion_txt("\n" + s1),             , ,         contador_lineas_totales += int(lineas_funcion), ,         contador_funciones_totales += 1, ,         contador_funciones += 1, ,         contador_lineas += int(lineas_funcion), ,         autor_anterior = autor, ,         if indice == len(informacion)-1 :,             ,             s1="\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje)+"%\n\n",             muestro_salida.impresiones(s1),             s2="Total: "+ str(contador_funciones_totales) + " Funciones - lineas\t " + str(contador_lineas_totales)+"\n",             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n"+s1),             archivo_participacion_txt("\n"+s2)            ,     ,     , 

