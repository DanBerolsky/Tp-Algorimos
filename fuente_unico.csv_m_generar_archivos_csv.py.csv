abro_ar,(archivo),m_generar_archivos_csv.py,    , , ,     with open(archivo, encoding="utf8") as archivo_completo: ,        ,         return leer(archivo_completo)
armar_csv_comentarios,(lista_cuerpo,nombre_funcion, modulo),m_generar_archivos_csv.py,    ,     nombre_archivo = 'comentarios.csv',     datos_comentarios = {},     lista = lista_cuerpo,     lineas_multiples = lista_comentarios(lista),     ,     if not resto:,         lineas_comentadas = lineas_multiples ,     else:,         lineas_comentadas = lineas_multiples + resto,     ,     nombre_autor,nombre_ayuda = autor_ayuda(lineas_multiples),     ,     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,             ,     ,     return cuerpo_sin_comentarios ,nombre_autor,nombre_ayuda,resto
armar_csv_funciones,(archivo),m_generar_archivos_csv.py,    ,     ,     nombre_archivo = "fuente_unico.csv",     datos = {},     ,     ,     modulos = abro_ar(archivo),     ultima_linea_indentada = None,     lista_modulos_comentarios = [[]],     for modulo in modulos:,         lineas = abro_ar(modulo),         contador_def = 0,         datos_comentarios = {},         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) + 1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = "(" + funcion.split('(')[1].lstrip().split(')')[0] + ")",                 contador_def += 1,                 ,                 if contador_def >1:,                     linea_return = linea,                     index_final = lineas.index(linea_return),                     cuerpo = lineas[index_inicial_anterior:index_final],                     cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                     datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                     datos[nombre_funcion_anterior] = {"Parametros de la funcion":parametros_anterior,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                     contador_def = 1,                 ,             if linea.strip().startswith("return "):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                 datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                 datos[nombre_funcion] = {"Parametros de la funcion":parametros,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                 contador_def = 0, ,             if linea.startswith("    "):,                 ultima_linea_indentada = linea,                 ,             if linea == lineas[len(lineas)-1]:,                 index_final = lineas.index(ultima_linea_indentada) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                 datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                 datos[nombre_funcion] = {"Parametros de la funcion":parametros,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                 ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial_anterior = lineas.index(funcion) + 1,                 nombre_funcion_anterior = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros_anterior = funcion.split('(')[1].lstrip().split(')')[0], ,         funciones_alfabeto = ordenar_alfabeticamente(datos),         comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),         lista_modulos_comentarios[0].append(modulo_csv.armo_csv(comentarios_alfabeto,'comentarios.csv',modulo, lista_modulos_comentarios)),     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo, modulo, lista_modulos_comentarios) 
autor_ayuda,(lista),m_generar_archivos_csv.py,    nombre_autor = "",     for i in lista:,         if 'Autor:' in i:,             nombre_autor = i.split('"""')[1].lstrip(),     b = ''.join(lista)        ,     nombre_ayuda = b.replace(nombre_autor,'').replace('"""',''),     return nombre_autor, nombre_ayuda
leer,(archivo),m_generar_archivos_csv.py,    ,     ,     lineas = [linea.rstrip('\n') for linea in archivo],     ,     return lineas
lista_comentarios,(lista),m_generar_archivos_csv.py,    ,     index_lista = [],     comentarios_triples = [],     for i in lista:,         if i.strip().startswith('"""'):,             index = lista.index(i),             index_lista.append(index),     if index_lista and len(index_lista) > 1:,         inicial = index_lista[0],         final = index_lista[1] +1,         comentarios_triples = lista[inicial:final],         ,     return comentarios_triples
ordenar_alfabeticamente,(diccionario),m_generar_archivos_csv.py,    ,     ,     return sorted(diccionario.items(), key = lambda clave: clave[0])
