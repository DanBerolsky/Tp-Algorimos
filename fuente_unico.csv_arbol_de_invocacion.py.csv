buscoAlgo_enCodigoDe,(funcion1, funcion2, csv),arbol_de_invocacion.py,, ,     cuerpo = depurarLineas(funcion2, csv),     contador = 0, ,     for linea in cuerpo:,         if funcion1 + "(" in linea:,             contador += 1, ,     return contador
buscoLlamadasAOtrasFunciones,funcion, indice, listaDeNombres, csv,arbol_de_invocacion.py,, ,     a = funcion + " (" + str(num_de_lineas(depurarLineas(funcion, csv))) + ")",     print(a, end=""),     contador = 0,     primer_rama = True, ,     for nombre in listaDeNombres:, ,         cant_llamados = buscoAlgo_enCodigoDe(nombre, funcion, csv), ,         if not primer_rama:, ,             if cant_llamados == 1:,                 print(" " * (len(a) + indice), end=""),                 print(" --> ", end=""),                 buscoLlamadasAOtrasFunciones(nombre, indice + len(a) + 5, listaDeNombres, csv), ,             elif cant_llamados > 1:,                 for f in range(cant_llamados):,                     print(" " * (len(a) + indice), end=""),                     print(" --> ", end=""),                     buscoLlamadasAOtrasFunciones(nombre, indice + len(a) + 5, listaDeNombres, csv), ,             else:,                 contador += 1, ,         else:, ,             if cant_llamados == 1:,                 print(" --> ", end=""),                 buscoLlamadasAOtrasFunciones(nombre, indice + len(a) + 5, listaDeNombres, csv),                 primer_rama = False, ,             elif cant_llamados > 1:,                 print(" --> ", end=""),                 buscoLlamadasAOtrasFunciones(nombre, indice + len(a) + 5, listaDeNombres, csv),                 for f in range(cant_llamados - 1):,                     print(" " * (len(a) + indice), end=""),                     print(" --> ", end=""),                     buscoLlamadasAOtrasFunciones(nombre, indice + len(a) + 5, listaDeNombres, csv),                 primer_rama = False, ,             else:,                 contador += 1, ,     if contador == len(listaDeNombres):,         print(""), ,     return, , 
depurarLineas,(funcion, csv),arbol_de_invocacion.py,, ,     dicc = modulo_csv.leer_csv(csv),     cuerpo_de_funcion_limpio = [],     ,     for key in dicc:,         if key == funcion:,             for linea in dicc[key]:,                 if linea.strip("\n \t"):,                     cuerpo_de_funcion_limpio.append(linea), ,     return cuerpo_de_funcion_limpio[2:]
funcionesIndependientes,(),arbol_de_invocacion.py,,     dicc_funciones = modulo_csv.quien_invoca_a_quien(),     nombresFunciones = generarListaNombresFunciones("fuente_unico.csv"), ,     for key in dicc_funciones:,         for i in range(len(dicc_funciones[key])):,             if dicc_funciones[key][i][0] in nombresFunciones:,                 nombresFunciones.remove(dicc_funciones[key][i][0]), ,     return nombresFunciones
generarArbol,listaFuncionesIndependientes, csv,arbol_de_invocacion.py,, ,     nombres = generarListaNombresFunciones(csv), ,     for funcion in listaFuncionesIndependientes:,         buscoLlamadasAOtrasFunciones(funcion, 0, nombres, csv),         print(""), ,     return, , 
generarListaNombresFunciones,(csv),arbol_de_invocacion.py,, ,     dicc = modulo_csv.leer_csv(csv),     listaDeNombresDeOtrasFunciones = [key for key in dicc], ,     return listaDeNombresDeOtrasFunciones
num_de_lineas,(cuerpoDeFuncion),arbol_de_invocacion.py,, ,     cantLineas = 0, ,     for linea in cuerpoDeFuncion:,         cantLineas += 1, ,     return cantLineas
