archivo_analizador,(texto),quien_invoca.py,,     with open ("analizador.txt","a") as archivo_generado:,         ,         archivo_generado.write(texto), ,     return None
armar_tabla,(),quien_invoca.py,    """[Autor: Alfonso],     [Ayuda: Genera tres listas, una con el titulo, una lista de listas con cada linea y espacio, y los totales]"""   ,     ,     lista_funciones , dicc_datos = quien_invoca_a_quien(),     enum_datos = list(enumerate(lista_funciones,1)),     ,     posicion = primer_item_lista(enum_datos),     ,     numeros = ','.join(map(str, posicion)),     ,     maximo,titulo = formato_titulo(posicion),     lista_total = []   ,     vacio = " ",     for numero,funcion in enum_datos:,         ,         conteo = 1,         ,         primer_campo = str(numero) + " " + funcion ,         ,         lista_a_imprimir = [primer_campo.ljust(32)],         ,         while conteo <= maximo:,             ,             lista_a_imprimir.append(vacio),             conteo += 1,         ,             ,         for clave, valor in dicc_datos.items():,             for lista in valor:,                 if funcion in lista:,                     numero_invocada =   [l for l in enum_datos if clave in l],                     funcion_a_invocar = numero_invocada[0][0],                     lista_a_imprimir[funcion_a_invocar] = 'X',                     ,         if funcion  in dicc_datos.keys():,             ,             dicc_informacion = dicc_datos[funcion],             lista_modificar = [],             for i,j in dicc_informacion:,                 ,                 numero_invocada =   [l for l in enum_datos if i in l] ,                 ,                 funcion_a_invocar = numero_invocada[0][0],                 ,                 lista_a_imprimir[funcion_a_invocar] = j,                 ,        ,         lista_total.append(lista_a_imprimir)        ,     ,     ,     lista_totales_numero = borrar_un_valor_lista(lista_total,vacio),     lista_totales_numero_2 = borrar_un_valor_lista(lista_totales_numero, 'X')   ,     borrar_primer_indice(lista_totales_numero_2),     ,     totales = sumar_totales(lista_totales_numero_2)  ,    ,     ,     return titulo, lista_total, totales
borrar_primer_indice,(lista),quien_invoca.py,    ,     for i in lista:,         del i[0]          ,     return lista
borrar_un_valor_lista,(lista,valor),quien_invoca.py,    lista_valor =[list(map(lambda x: x if x!= valor else 0, i)) for i in lista],     return lista_valor
correcto_espaciado,(lista),quien_invoca.py,
formato_cuerpo,(lista),quien_invoca.py,    for i in lista:,         i = formato_tabla(correcto_espaciado(i)),         print(i),         i = i + '\n',         archivo_analizador(i),     return i
formato_tabla,(lista),quien_invoca.py,    ,     str_nuevo = ' | '.join(map(str, lista)),     return str_nuevo
formato_titulo,(lista),quien_invoca.py,    maximo =max(lista),     titulo = lista,     titulo.insert(0,"Funciones                       "),     ,     return maximo,titulo
la_tabla,(),quien_invoca.py,
leer_csv,(nombre_csv),quien_invoca.py,        ,     dicc_csv = {},     ,     for linea in open(nombre_csv, 'r').readlines():,         linea = linea.strip().split(','),         dicc_csv[linea[0]] = linea[1:] ,     return dicc_csv
primer_item_lista,(lista),quien_invoca.py,    ,     return [item[0] for item in lista] 
quien_invoca_a_quien,(),quien_invoca.py,    diccionario_csv = leer_csv(fuente),     nombre_funcion = [],     resultado = {}, ,     for fila in diccionario_csv:,         nombre_funcion.append(fila),         ,     for fila in diccionario_csv.items():,         clave = fila[0],         cuerpo = fila[1][2:],         ,         for funcion in nombre_funcion:,             ,             ,             funciones_en_cuerpo = [s for s in cuerpo if funcion in s],             ,             contador = len(funciones_en_cuerpo),             lista_de_invocacion = [funcion,contador],             ,             if contador > 0:,                 ,                 if clave in resultado:,                     resultado[clave].append(lista_de_invocacion),                     ,                 else:    ,                     resultado[clave] = [lista_de_invocacion],                     ,     return nombre_funcion, resultado
remover_ceros,(lista),quien_invoca.py,    reemplazo =[' ' if i==0 else i for i in lista],     return reemplazo
sumar_totales,(lista),quien_invoca.py,    totales = []  ,     for columna_matriz in enumerate(lista[0]):,         suma_columna = sum([x[columna_matriz[0]] for x in lista]),         totales.append(suma_columna),     totales.insert(0,"Total Invocaciones              "),     return totales
