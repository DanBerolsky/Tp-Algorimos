Nombre de la función: participacion_info  Parametros: informacion Modulo: informacion2 Autor: [Autor: Dan]  Ayuda: Ayuda: recopila los parametros para el Quinta punto Cuerpo: ['Informacion_por_desarrollador.py    ', 'Informacion_por_desarrollador.py     integrantes en el desarrollo de la aplicación.', 'Informacion_por_desarrollador.py     Ademas de mostrar la informacion por pantalla', 'Informacion_por_desarrollador.py', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py     autor_anterior = None', 'Informacion_por_desarrollador.py     total_funciones = 0', 'Informacion_por_desarrollador.py     muestro_salida.impresiones("\\n\\tInforme de Desarrollo Por Autor\\n")', 'Informacion_por_desarrollador.py     ', 'Informacion_por_desarrollador.py     ', 'Informacion_por_desarrollador.py     archivo_participacion_txt("\\n\\tInforme de Desarrollo Por Autor\\n")', 'Informacion_por_desarrollador.py     ', 'Informacion_por_desarrollador.py     ', 'Informacion_por_desarrollador.py     for indice in range(len(informacion)):     ', 'Informacion_por_desarrollador.py         ', 'Informacion_por_desarrollador.py         nombre_funcion = informacion[indice][0]', 'Informacion_por_desarrollador.py         ', 'Informacion_por_desarrollador.py         autor', 'Informacion_por_desarrollador.py lineas_funcion = informacion[indice][1]', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         porcentaje = informacion2[autor]', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         total_funciones += 1', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         if autor_anterior == None:', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("Autor: " + autor +"\\n\\n\\tFuncion\\t\\t\\tLineas\\n\\t---------------------------------")', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             espacios = 8 + len(nombre_funcion) - 32', 'Informacion_por_desarrollador.py             espacios1 = " "*(-1*espacios)', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("\\t" + nombre_funcion + espacios1 + str(lineas_funcion))', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\nAutor: " + autor +"\\n\\n\\tFuncion\\t\\t\\tLineas\\n\\t---------------------------------")', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\n\\t" + nombre_funcion + espacios1 + str(lineas_funcion))', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             contador_lineas_totales = 0', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             contador_funciones_totales = 0', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             contador_funciones = 0', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             contador_lineas = 0', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             porcentaje_anterior = porcentaje', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             autor_anterior = autor', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         elif autor_anterior!=autor:', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("\\t"+str(contador_funciones) + " Funciones - Lineas\\t" + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\\n")', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("Autor: " + autor +"\\n\\n\\tFuncion\\t\\t\\tLineas\\n\\t---------------------------------")', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             espacios = 8 + len(nombre_funcion) - 32', 'Informacion_por_desarrollador.py             espacios1 = " "*(-1*espacios)', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("\\t" + nombre_funcion + espacios1 + str(lineas_funcion))', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\n\\t"+str(contador_funciones) + " Funciones - Lineas\\t" + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\\n")', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\nAutor: " + autor +"\\n\\n\\tFuncion\\t\\t\\tLineas\\n\\t---------------------------------")', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\n\\t" + nombre_funcion + espacios1 + str(lineas_funcion))', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             contador_funciones = 0', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             contador_lineas = 0', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             porcentaje_anterior = porcentaje', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         else:', 'Informacion_por_desarrollador.py         ', 'Informacion_por_desarrollador.py             espacios = 8 + len(nombre_funcion) - 32', 'Informacion_por_desarrollador.py             espacios1 = " "*(-1*espacios)', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("\\t" + nombre_funcion + espacios1 + str(lineas_funcion))', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\n\\t" + nombre_funcion + espacios1 + str(lineas_funcion))', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         contador_lineas_totales += int(lineas_funcion)', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         contador_funciones_totales += 1', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         contador_funciones += 1', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         contador_lineas += int(lineas_funcion)', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         autor_anterior = autor', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py         if indice == len(informacion)-1 :', 'Informacion_por_desarrollador.py             ', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("\\t"+str(contador_funciones) + " Funciones - Lineas\\t" + str(contador_lineas) + "  " + str(porcentaje)+"%\\n\\n")', 'Informacion_por_desarrollador.py             muestro_salida.impresiones("Total: "+ str(contador_funciones_totales) + " Funciones - lineas\\t" + str(contador_lineas_totales)+"\\n")', 'Informacion_por_desarrollador.py ', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\n\\t"+str(contador_funciones) + " Funciones - Lineas\\t" + str(contador_lineas) + "  " + str(porcentaje)+"%\\n\\n")', 'Informacion_por_desarrollador.py             archivo_participacion_txt("\\nTotal: "+ str(contador_funciones_totales) + " Funciones - lineas\\t" + str(contador_lineas_totales)+"\\n")            ', 'Informacion_por_desarrollador.py     ', 'Informacion_por_desarrollador.py     return None'] Comentarios: ['    porcentaje de lineas del autor', ' sobre lineas totales del trabajo. ) ] """', '     #datos porcentajes', '     #ordeno por autores']

Nombre de la función: ordenar_alfabeticamente Parametros: diccionario Modulo: m_generar_archivos_csv.py Autor: [Autor: L]  Ayuda: Ayuda: Es la funcion principal Cuerpo: ['         ', '         return sorted(diccionario.items()', '     key = lambda clave: clave[0]', '     reverse = True)'] Comentarios: ['    #Primer punto', '     # #Quinto punto', '     # import Informacion_por_desarrollador', '     # informacion', 'porcentaje = capturo_datos()', '     # Informacion_por_desarrollador.participacion_info(informacion', 'porcentaje)']

Nombre de la función: main Parametros:  Modulo: programa_principal.py Autor: [Autor: A] Ayuda: Ayuda: Lee el archivo linea por linea Cuerpo: ['         ', "         txt = 'programas.txt'", '         m_generar_archivos_csv.armar_csv_funciones(txt)', '         ', '         ', '         return None'] Comentarios: ['']

Nombre de la función: leer Parametros: archivo Modulo: m_generar_archivos_csv.py Autor: [Autor: b] Ayuda: Ayuda: abre un archivo Cuerpo: ['         ', "         lineas = [linea.rstrip('\\n') for linea in archivo]", '         ', '         return lineas'] Comentarios: ['   # encoding="utf8" use eso para solucionar el error.', '    #El archivo informacion_por_desarollador era el que generaba ese problema', '', '    #aprantemente era por que tenia otro codificacion "utf8"']

Nombre de la función: impresiones  Parametros: contenido_a_mostrar Modulo: muestro_salida.py Autor: [Autor: b] Ayuda: Ayuda: Ordena diccionario de mayor a menor Cuerpo: ['     ', '         print(contenido_a_mostrar)', '     ', '         return None'] Comentarios: [' respecto las claves del mismo. Devuelvo lista de tuplas]', '']

Nombre de la función: contar_funciones Parametros: linea Modulo: contar_funciones.py Autor: [Autor: b] Ayuda: Ayuda: abre un archivo Cuerpo: ['    cantidad_funciones = {"if": 0 "while": 0', '    cantidad_funciones = {"if": 0 "for": 0', '    cantidad_funciones = {"if": 0 "returns": 0', '    cantidad_funciones = {"if": 0 "break": 0', '    cantidad_funciones = {"if": 0 "exit": 0', '    cantidad_funciones = {"if": 0 "ayuda": 0}', '    cantidad_funciones = {"if": 0     if linea.strip().startswith("if"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["if"] += 1', '    cantidad_funciones = {"if": 0     elif linea.strip().startswith("while"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["while"] += 1', '    cantidad_funciones = {"if": 0     elif linea.strip().startswith("for"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["for"] += 1', '    cantidad_funciones = {"if": 0     elif linea.strip().startswith("return"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["returns"] += 1', '    cantidad_funciones = {"if": 0     elif linea.strip().startswith("break"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["break"] += 1', '    cantidad_funciones = {"if": 0     elif linea.strip().startswith("exit"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["exit"] += 1', '    cantidad_funciones = {"if": 0     elif linea.strip().startswith("[Ayuda: ]"):', '    cantidad_funciones = {"if": 0         cantidad_funciones["ayuda"] += 1', '    cantidad_funciones = {"if": 0     return cantidad_funciones'] Comentarios: ['    #Declaro variables', '     #Abro los modulos', '     #Itero a traves de los modulos del txt', '             #Busco la linea que comienze por def para encontrar el nombre de la funcion', ' sus parametros y cuerpo', '     #Ordeno el diccionario']

Nombre de la función: capturo_datos Parametros:  Modulo: programa_principal.py Autor: [Autor: D] Ayuda: Ayuda: Remueve los comentarios de la funcion y crea el archivo comentarios.csv Cuerpo: ['         (Nombres de las funciones', '     autor de la funcion ', '     lineas por funcion y', '     ', '         info = {}', '         ', '         lineas_totales_por_autor = {}', '     ', '         total_linea = 0', '     ', '         with open("comentarios.csv"', '    "rt") as ar_coment:', '             ', '             linea = ar_coment.readline()', '     ', '             while linea!="":', '                 ', '                 datos = linea.split("', '    ")', '     ', '                 nombre_funcion = datos[0]', '     ', '                 autor0 = datos[1]', '     ', '                 autor1=autor0.split(": ")', '     ', '                 autor2 = autor1[1].split("]")', '     ', '                 info[nombre_funcion]=[autor2[0]', '    None]', '     ', '                 linea = ar_coment.readline()', '     ', '         with open ("fuente_unico.csv"', '    "rt") as ar_fuente:', '     ', '             linea = ar_fuente.readline()', '     ', '             while linea!="":', '     ', '                 datos = linea.split("', '    ")', '                 ', '                 contador_lineas = 0', '     ', '                 funcion_actual = datos[0]', '                 ', '                 total_linea += len(datos[3:])', '                 ', '                 contador_lineas = len(datos[3:])', '                 ', '                 for clave in info.keys():', '                     ', '                     if clave == funcion_actual:', '                         info[clave][1] = contador_lineas', '                         ', '                         if info[clave][0] in lineas_totales_por_autor.keys():', '                             lineas_totales_por_autor[info[clave][0]]+=contador_lineas', '                         ', '                         else:', '                             lineas_totales_por_autor[info[clave][0]]=contador_lineas', '     ', '                 linea = ar_fuente.readline()', '     ', '         porcentajes ={}', '     ', '         for clave in lineas_totales_por_autor.keys():', '         ', '             porcentajes[clave]=int((lineas_totales_por_autor[clave]/total_linea)*100)', '     ', '         ', '         datos_finales = sorted(info.items()', '     key = lambda autor: autor[1][0])', '         ', '         return datos_finales', '    porcentajes'] Comentarios: ['    #Declaracion de variables para simplificar mi existencia', '     #Busco las lineas comentadas y me quedo con una lista de las lineas comentadas', "     lineas_comentadas = [i for i in lista if comentario_triple in i or '#' in i]", '     #Busco las lineas que formaran el resto de mi csv', '     #Cruzo las lineas comentadas con el cuerpo de la otra funcion para devolver solo las lineas del cuerpo de la funcion que no tienen comentario', '     #Itero atraves de las lineas comentadas para encontrar el autor y ayuda', '             #me creo el diccionario con los campos que necesito', '     #Ordeno el diccionario', ' respecto sus claves', '     #Genero el csv.']

Nombre de la función: armo_csv Parametros: Estructura_de_datos Modulo: nombre_archivo Autor: [Autor: Dan]  Ayuda: Ayuda: Crea y agrega informacion dentro del csv Cuerpo: ['modulo_csv.py    ', 'modulo_csv.py     ', "modulo_csv.py     if nombre_archivo == 'fuente_unico.csv':", 'modulo_csv.py     ', 'modulo_csv.py         with open (nombre_archivo', 'modulo_csv.py"a") as codigo:', 'modulo_csv.py             ', 'modulo_csv.py             for clave in Estructura_de_datos:', 'modulo_csv.py                 ', 'modulo_csv.py                 nombre_funcion = clave[0]', 'modulo_csv.py                 parametros = clave[1][0]', 'modulo_csv.py                 modulo = clave[1][1]', 'modulo_csv.py                 cuerpo = clave[1][2]', 'modulo_csv.py                 ', 'modulo_csv.py                 funcion = "\\n".join(cuerpo)', 'modulo_csv.py             ', 'modulo_csv.py                 funcion = "', 'modulo_csv.py ".join(cuerpo)', 'modulo_csv.py             ', 'modulo_csv.py                 codigo.write(nombre_funcion+"', 'modulo_csv.py"+parametros+"', 'modulo_csv.py"+modulo+"', 'modulo_csv.py"+funcion+"\\n")', 'modulo_csv.py     ', "modulo_csv.py     elif nombre_archivo == 'comentarios.csv':", 'modulo_csv.py         ', 'modulo_csv.py         with open (nombre_archivo', 'modulo_csv.py"a") as codigo:', 'modulo_csv.py             ', 'modulo_csv.py             for elementos in Estructura_de_datos:', 'modulo_csv.py                 ', 'modulo_csv.py                 nombre_funcion = elementos[0]', 'modulo_csv.py                 nombre_autor = elementos[1][0]', 'modulo_csv.py                 nombre_ayuda = elementos[1][1]', 'modulo_csv.py                 resto = elementos[1][2]', 'modulo_csv.py ', 'modulo_csv.py             ', 'modulo_csv.py                 funcion = "', 'modulo_csv.py ".join(resto)', 'modulo_csv.py             ', 'modulo_csv.py                 codigo.write(nombre_funcion + "', 'modulo_csv.py" + nombre_autor + "', 'modulo_csv.py" + nombre_ayuda + "', 'modulo_csv.py" + funcion + "\\n")', 'modulo_csv.py     ', 'modulo_csv.py     return None'] Comentarios: ['                #Modelo de parametros', '                 #Escribo en el csv', '                 #Modelo de parametros', '                 #Escribo en el csv']

Nombre de la función: armar_csv_funciones Parametros: archivo Modulo: m_generar_archivos_csv.py Autor: [Autor: Dan] Ayuda: Ayuda: Muestra por pantalla el parametro recibido Cuerpo: ['         ', '         nombre_archivo = "fuente_unico.csv"', '         datos = {}', '         ', '         modulos = abro_ar(archivo)', '         ', '         for modulo in modulos:', '             lineas = abro_ar(modulo)', '     ', '             for linea in lineas:', '                       ', "                 if linea.startswith('def '):", '                     funcion = linea', '                     index_inicial = lineas.index(funcion) + 1', "                     nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0]", "                     parametros = funcion.split('(')[1].lstrip().split(')')[0]", '     ', "                 elif linea.strip().startswith('return'):", '                     linea_return = linea', '                     index_final = lineas.index(linea_return) + 1', '                     cuerpo = lineas[index_inicial:index_final]', '                     cuerpo_sin_comment = armar_csv_comentarios(cuerpo', '    nombre_funcion)', '                     datos[nombre_funcion] = [parametros', '    modulo', '    cuerpo_sin_comment]', '     ', '         funciones_alfabeto = ordenar_alfabeticamente(datos)', '       ', '         return modulo_csv.armo_csv(funciones_alfabeto', '    nombre_archivo)'] Comentarios: ['']

Nombre de la función: armar_csv_comentarios Parametros: lista_cuerpo Modulo: nombre_funcion Autor: [Autor: Dan] Ayuda: Ayuda: brindar datos sobre la participación de cada uno de los Cuerpo: ['m_generar_archivos_csv.py    ', 'm_generar_archivos_csv.py     ', 'm_generar_archivos_csv.py     comentario_triple = \'\\"\\"\\"\'', "m_generar_archivos_csv.py     nombre_archivo = 'comentarios.csv'", 'm_generar_archivos_csv.py     autor = "[Autor:"', 'm_generar_archivos_csv.py     ayuda = "[Ayuda:"', 'm_generar_archivos_csv.py     nombre_autor = ""', 'm_generar_archivos_csv.py     nombre_ayuda = ""', 'm_generar_archivos_csv.py     resto = []   ', 'm_generar_archivos_csv.py     datos_comentarios = {}', 'm_generar_archivos_csv.py ', 'm_generar_archivos_csv.py     lista = lista_cuerpo    ', 'm_generar_archivos_csv.py     resto = [j for j in lineas_comentadas if autor not in j and ayuda not in j]', 'm_generar_archivos_csv.py     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas]', 'm_generar_archivos_csv.py     ', 'm_generar_archivos_csv.py     for comentarios in lineas_comentadas:', 'm_generar_archivos_csv.py         if autor in comentarios:', 'm_generar_archivos_csv.py             nombre_autor = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0]', 'm_generar_archivos_csv.py         elif ayuda in comentarios:', 'm_generar_archivos_csv.py             nombre_ayuda = comentarios.split(comentario_triple)[1].lstrip().split(comentario_triple)[0]', 'm_generar_archivos_csv.py             ', 'm_generar_archivos_csv.py             datos_comentarios[nombre_funcion] = [nombre_autor', 'm_generar_archivos_csv.pynombre_ayuda', 'm_generar_archivos_csv.pyresto]', 'm_generar_archivos_csv.py             ', 'm_generar_archivos_csv.py     comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios)', 'm_generar_archivos_csv.py     ', 'm_generar_archivos_csv.py     modulo_csv.armo_csv(comentarios_alfabeto', 'm_generar_archivos_csv.pynombre_archivo)', 'm_generar_archivos_csv.py     ', 'm_generar_archivos_csv.py     return cuerpo_sin_comentarios'] Comentarios: ['    genera la misma salida al archivo participacion.txt ]"""']

