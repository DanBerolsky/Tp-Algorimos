archivo_participacion_txt ,(agrego),Informacion_por_desarrollador.py,
armar_diccionarios,(),consulta_de_funciones.py,,     diccionario_fuente_unico = {},     diccionario_comentarios = {},     with open("fuente_unico.csv", "r") as fuente_unico:,         linea = fuente_unico.readline().rstrip("\n"),         while linea != "":,             datos = linea.split(","),             if len(datos) > 1:,                 nombre_funcion = datos[0],                 parametros = datos[1],                 modulo = datos[2],                 cuerpo = [datos[3] + i for i in datos[4:]],                 diccionario_fuente_unico[nombre_funcion.rstrip(" ")] = [parametros, modulo, cuerpo],                 linea = fuente_unico.readline().rstrip("\n"), ,     with open("comentarios.csv", "r") as comentarios:,         linea_comentarios = comentarios.readline().rstrip("\n"),         while linea_comentarios:,             datos2 = linea_comentarios.split(","),             nombre_funcion = datos2[0],             autor = datos2[1],             ayuda = datos2[2],             lista_comentarios = datos2[3:],             diccionario_comentarios[nombre_funcion.rstrip(" ")] = [autor, ayuda, lista_comentarios],             linea_comentarios = comentarios.readline().rstrip("\n"),         return diccionario_fuente_unico, diccionario_comentarios
cantidad_de_espacios,(nombre_funcion),Informacion_por_desarrollador.py,    ,   ,     if 8 + len(nombre_funcion)<33:,         ,         espacios = -1 * (8 + len(nombre_funcion) - 33),     ,     else:,         ,         espacios = 2, ,     return espacios  
capturo_datos,(),Informacion_por_desarrollador.py,    , ,     informacion_deseada = {},     ,     lineas_totales_por_autor = {}, ,     total_linea = 0, ,     with open("comentarios.csv","rt") as archivo_comentarios:,         ,         linea_archivos_comentarios = archivo_comentarios.readline(), ,         while linea_archivos_comentarios != "":,             ,             linea_a_lista_de_datos = linea_archivos_comentarios.split(","), ,             nombre_funcion = linea_a_lista_de_datos[0], ,             autor = linea_a_lista_de_datos[1].split(": ")[1].rstrip("]"), ,             informacion_deseada[nombre_funcion] = [autor,None], ,             linea_archivos_comentarios = archivo_comentarios.readline(), ,     with open ("fuente_unico.csv","rt") as archivo_fuente_unico:, ,         linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,         while linea_archivos_fuente_unico != "":, ,             linea_a_lista_de_datos = linea_archivos_fuente_unico.split(","),             ,             contador_lineas = 0, ,             funcion_actual = linea_a_lista_de_datos[0],             ,             total_linea += len(linea_a_lista_de_datos[3:]),             ,             contador_lineas = len(linea_a_lista_de_datos[3:]),             ,             for clave in informacion_deseada.keys():,                 ,                 if clave == funcion_actual:,                     informacion_deseada[clave][1] = contador_lineas,                     ,                     if informacion_deseada[clave][0] in lineas_totales_por_autor.keys():,                         lineas_totales_por_autor[informacion_deseada[clave][0]] += contador_lineas,                     ,                     else:,                         lineas_totales_por_autor[informacion_deseada[clave][0]] = contador_lineas, ,             linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,     porcentajes = {}, ,     for clave in lineas_totales_por_autor.keys():,     ,         porcentajes[clave] = int((lineas_totales_por_autor[clave]/total_linea)*100), ,     ,     datos_finales = sorted(informacion_deseada.items(), key = lambda autor: autor[1][0]),     ,     return datos_finales,porcentajes
consultar_funciones,diccionario_fuente, diccionario_comentarios,consulta_de_funciones.py,    funcion = input("Función: "),     while funcion != "":,         nombre_funcion = funcion[1:],             if funcion.startswith("?") and funcion != "?todo":,                 print(sacar_corchetes(diccionario_comentarios[nombre_funcion][1]) + "\n" + "Parametros: " + str(diccionario_fuente[nombre_funcion][0]) + "\n" + "Modulo: " + str(diccionario_fuente[nombre_funcion][1]) + "\n" + sacar_corchetes(str(diccionario_comentarios[nombre_funcion][0]))),                 print(sacar_corchetes(str(diccionario_comentarios[nombre_funcion][0])) + "\n" + "Parametros: " + str(diccionario_fuente[nombre_funcion][0]) + "\n" + "Modulo: " + str(diccionario_fuente[nombre_funcion][1]) + "\n" + sacar_corchetes(str(diccionario_comentarios[nombre_funcion][1])) + "\n" + "Cuerpo: " + str(diccionario_fuente[nombre_funcion][2]) + "\n" + "Comentarios: " + str(diccionario_comentarios[nombre_funcion][2])),                 for i in diccionario_fuente:,                     if i in diccionario_comentarios:,                         print("Autor: " + sacar_corchetes(diccionario_comentarios[i][0]) + "\n" + "Parametros: " + diccionario_fuente[i][0] + "\n" + "Modulo: " + diccionario_fuente[i][1] + "\n" + sacar_corchetes(diccionario_comentarios[i][1]) + "\n" + "Cuerpo: " + str(diccionario_fuente[i][2]) + "\n" + "Comentarios: " + str(diccionario_comentarios[i][2])),                         print("\n"),             elif funcion == "imprimir ?todo":,                 generar_txt(diccionario_fuente, diccionario_comentarios, "ayuda_funciones.txt"),         else:,             print("La función especificada no existe. Por favor, ingrese una función valida"),         funcion = input("Función: "), , 
generar_lista_total,(dic),consulta_de_funciones.py,    lista_total = [[]],     for i in dic:,         ultima_lista = lista_total[-1],         if len(ultima_lista) < 5:,             ultima_lista.append(format(i, "<26s")),         else:,             lista_total.append([]),             ultima_lista = lista_total[-1],             ultima_lista.append(format(i, "<26s")),     if len(lista_total[-1]) < 5:,         for i in range(0, 5-len(lista_total[-1])):,             lista_total[-1].append(format(" ", "<26s")),     return lista_total
generar_txt,dict_fuente, dict_comentarios, txt,consulta_de_funciones.py,    diccionario_slices = {},     for clave in dict_fuente:,         if clave in dict_comentarios:,             indice_anterior = 0,             diccionario_slices[clave] = [],             info_imprimir = "Nombre de la función: " + clave + ", " + "Parametros: " + str(dict_fuente[clave][0]) + ", " + "Modulo: " + str(dict_fuente[clave][1]) + ", " + "Autor: " + dict_comentarios[clave][0] + " " + "Ayuda: " + sacar_corchetes(str(dict_comentarios[clave][1])) + ", " + "Cuerpo: " + str(dict_fuente[clave][2]) + ", " + "Comentarios: " + str(dict_comentarios[clave][2]) + "\n\n",             for caracter in range(len(info_imprimir)):,                 if caracter % 80 == 0:,                     diccionario_slices[clave].append(info_imprimir[indice_anterior:caracter]),                     indice_anterior = caracter,             diccionario_slices[clave].append("\n"),         else:,             pass,     with open(txt, "w") as archivo:,         for lista in diccionario_slices:,             for item in range(len(diccionario_slices[lista])):,                 archivo.write(diccionario_slices[lista][item] + "\n"), , 
imprimir_funciones,listas,consulta_de_funciones.py,,     for lista in listas:,         print(lista), , 
main_consulta_funciones,(),consulta_de_funciones.py,    dic_fuente, dic_comentarios = armar_diccionarios(),     print(imprimir_funciones(generar_lista_total(dic_fuente))),     generar_txt(dic_fuente, dic_comentarios, "ayuda_funciones.txt"),     consultar_funciones(dic_fuente, dic_comentarios)
participacion_info ,informacion,informacion2,Informacion_por_desarrollador.py,,     autor_anterior = None,     ,     titulo = "\n\tInforme de Desarrollo Por Autor\n",     muestro_salida.impresiones(titulo),     ,     archivo_participacion_txt(titulo),     ,     ,     for indice in range(len(informacion)):     ,         ,         nombre_funcion = informacion[indice][0],         ,         autor, lineas_funcion = informacion[indice][1], ,         porcentaje = informacion2[autor], ,         if autor_anterior == None:,             ,             s1 = "Autor: " + autor + "\n\n\tFuncion" + 16*" " + "Lineas"+"\n\t" + 33 * "-",             muestro_salida.impresiones(s1),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s2 = "\t" + nombre_funcion + (" " * espacios) + str(lineas_funcion),             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n" + s2),             ,             contador_lineas_totales = 0,             ,             contador_funciones_totales = 0,             ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,             autor_anterior = autor, ,         elif autor_anterior != autor:,             ,             s1 = "\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\n",             muestro_salida.impresiones(s1),             ,             s2 = "Autor: " + autor +"\n\n\tFuncion"+16*" "+"Lineas\n\t" + 33*"-",             muestro_salida.impresiones(s2),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s3 = "\t" + nombre_funcion + (" " * espacios) + str(lineas_funcion),             muestro_salida.impresiones(s3),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n" + s2),             archivo_participacion_txt("\n" + s3),             , ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,         else:,         ,             espacios = cantidad_de_espacios(nombre_funcion),             s1 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s1),             ,             archivo_participacion_txt("\n" + s1),             , ,         contador_lineas_totales += int(lineas_funcion), ,         contador_funciones_totales += 1, ,         contador_funciones += 1, ,         contador_lineas += int(lineas_funcion), ,         autor_anterior = autor, ,         if indice == len(informacion)-1 :,             ,             s1 = "\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje)+"%\n\n",             muestro_salida.impresiones(s1),             s2 = "Total: "+ str(contador_funciones_totales) + " Funciones - lineas\t " + str(contador_lineas_totales)+"\n",             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n" + s2)            ,     ,     , 
sacar_corchetes,(cadena),consulta_de_funciones.py,    if cadena.endswith(" "):,         sin_corchetes = cadena.lstrip("[").rstrip("] "),     else:,         sin_corchetes = cadena.lstrip("[").rstrip("]"),     return sin_corchetes
