contar_funciones,(linea),contar_funciones.py,    cantidad_funciones = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": 0},     if linea.strip().startswith("if"):,         cantidad_funciones["if"] += 1,     elif linea.strip().startswith("while"):,         cantidad_funciones["while"] += 1,     elif linea.strip().startswith("for"):,         cantidad_funciones["for"] += 1,     elif linea.strip().startswith("return"):,         cantidad_funciones["returns"] += 1,     elif linea.strip().startswith("break"):,         cantidad_funciones["break"] += 1,     elif linea.strip().startswith("exit"):,         cantidad_funciones["exit"] += 1,     elif linea.strip().startswith("[Ayuda: ]"):,         cantidad_funciones["ayuda"] += 1,     return cantidad_funciones
es_primo,(valor),lib_matematica.py,,     devolver = True,     if valor <= 1:,         devolver = False,     else:,         divisor = 2,         while (((valor % divisor)!=0) and (divisor <= valor/2)):,             divisor += 1, ,         if divisor <= valor/2:,             devolver = False, ,         return devolver
factorial,(n),lib_matematica.py,,     resultado = 1,     for i in range(2, n+1):,         resultado = resultado * i, ,     return resultado
mcd,(nro_1, nro_2),lib_matematica.py,,     if abs(nro_1) < abs(nro_2):,         menor = abs(nro_1),         mayor = abs(nro_2),     else:,         menor = abs(nro_2),         mayor = abs(nro_1), ,         devovler = -1,     elif menor == 0:,         devolver = mayor,         dividendo = mayor,         divisor = menor,         resto = mayor % divisor, ,         while resto != 0:,             dividendo = divisor,             divisor = resto,             resto = dividendo % divisor, ,         devolver = divisor, ,     return devolver
mcm,(nro_1, nro_2),lib_matematica.py,    return (nro_1 * nro_2)//mcd(nro_1, nro_2),     
potencia,(base, exponente),lib_matematica.py,
