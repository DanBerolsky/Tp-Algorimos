contar_elementos_varios,(lista, lista_comentarios),Panel_General.py,    cantidad_elementos = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": "NO"},     j = 4,     while j < len(lista):,         if lista[j].strip().startswith("if") or lista[j].strip().startswith(,             cantidad_elementos["if"] += 1,         elif lista[j].strip().startswith("while"):,             cantidad_elementos["while"] += 1,         elif lista[j].strip().startswith("for"):,             cantidad_elementos["for"] += 1,         elif lista[j].strip().startswith("return"):,             cantidad_elementos["returns"] += 1,         elif lista[j].strip().startswith("break"):,             cantidad_elementos["break"] += 1,         elif lista[j].strip().startswith("exit"):,             cantidad_elementos["exit"] += 1,         if lista_comentarios[2].strip().startswith("[Ayuda:"):,             cantidad_elementos["ayuda"] = "SI",         j = j + 1,     return cantidad_elementos
contar_funciones,(linea),contar_funciones.py,    """[Autor : F] """,     cantidad_funciones = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": 0},     if linea.strip().startswith("if"):,         cantidad_funciones["if"] += 1,     elif linea.strip().startswith("while"):,         cantidad_funciones["while"] += 1,     elif linea.strip().startswith("for"):,         cantidad_funciones["for"] += 1,     elif linea.strip().startswith("return"):,         cantidad_funciones["returns"] += 1,     elif linea.strip().startswith("break"):,         cantidad_funciones["break"] += 1,     elif linea.strip().startswith("exit"):,         cantidad_funciones["exit"] += 1,     elif linea.strip().startswith("[Ayuda: ]"):,         cantidad_funciones["ayuda"] += 1,     return cantidad_funciones
contar_invocaciones,(nombre_funcion, lista),Panel_General.py,    i = 0,     invocaciones_dict = {"Cantidad de Invocaciones": 0},     while i < len(lista):,         j = 4,         while j < len(lista[i]):,             if nombre_funcion in lista[i][j]:,                 invocaciones_dict["Cantidad de Invocaciones"] += 1,             j = j + 1,         i = i + 1,     return invocaciones_dict
organizar_datos,(lista),Panel_General.py,    j = 0,     primeros_3 = {"Nombre de Funcion": lista[0] + lista[2], "Cantidad de Parametros": lista[1].count('('),,                   "Cantidad de Lineas": len(lista) - 3},     return primeros_3
panel_principal,(),Panel_General.py,    with open('comentarios.csv', 'r') as comentarios:,         reader = csv.reader(comentarios),         lista_de_comentarios = [],         for fila in reader:,             lista_de_comentarios.append(fila),     with open('fuente_unico.csv', 'r') as file:,         reader = csv.reader(file),         lista_completa = [],         lista_final = {},         datos = [],         for row in reader:,             lista_completa.append(row),         lista1 = lista_completa,         i = 0,         while i < len(lista_completa):,             lista_final_1 = organizar_datos(lista_completa[i]),             lista_final_2 = contar_invocaciones(lista_completa[i][0], lista_completa),             lista_final_3 = contar_elementos_varios(lista_completa[i], lista_de_comentarios[i]),             lista_final.update(lista_final_1),             lista_final.update(lista_final_2),             lista_final.update(lista_final_3),             datos.append(lista_final),             lista_final = {},             i = i + 1, ,     header = datos[0].keys(),     rows = [x.values() for x in datos],     print(tabulate.tabulate(rows, header))
