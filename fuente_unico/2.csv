armo_csv,(Estructura_de_datos,nombre_archivo, modulo, lista_modulos_comentarios),modulo_csv.py,,     if nombre_archivo == "fuente_unico.csv":,         ,         lista_modulos_fuente = [[]], ,         for clave in Estructura_de_datos:, ,             nombre_funcion = clave[0],             parametros = clave[1]["Parametros de la funcion"],             modulo = clave[1]["Nombre del modulo"],             cuerpo = clave[1]["Cuerpo de la funcion"],             ,             funcion = ", ".join(cuerpo), ,             archivo_a_escribir = nombre_archivo + "_" + modulo + ".csv",             ,             ,             ya_esta = 0,             index = 0,             ,             while ya_esta == 0 and index <= len(lista_modulos_fuente[0]) - 1:,                 ,                 if lista_modulos_fuente[0][index] == archivo_a_escribir:,                     ya_esta = 1,                 index += 1,             ,             if ya_esta == 0:,                 lista_modulos_fuente[0].append(archivo_a_escribir),             , ,             with open(archivo_a_escribir, "a") as archivo_fuente_unico:,                 ,                 archivo_fuente_unico.write(nombre_funcion+","+parametros+","+modulo+","+funcion+"\n"),         fuente_unico = 1,         merge.ciclar_modulos(lista_modulos_fuente, fuente_unico),         merge.ciclar_modulos(lista_modulos_comentarios, lista_modulos_comentarios), ,     elif nombre_archivo == 'comentarios.csv':,         for elementos in Estructura_de_datos:, ,             nombre_funcion = elementos[0],             nombre_autor = elementos[1]["Nombre del autor"],             nombre_ayuda = elementos[1]["informacion de ayuda"],             resto = elementos[1]["Resto de lineas comentadas"],             funcion = ", ".join(resto), ,             archivo_a_escribir = nombre_archivo + "_" + modulo + ".csv"    , , ,             ,             with open (archivo_a_escribir, "a") as archivo_comentarios:, ,                 archivo_comentarios.write(nombre_funcion + "," + nombre_autor + "," + nombre_ayuda + "," + funcion + "\n") , ,         return archivo_a_escribir
contar_elementos_varios,(lista, lista_comentarios),Panel_General.py,    cantidad_elementos = {"if": 0, "while": 0, "for": 0, "returns": 0, "break": 0, "exit": 0, "ayuda": "NO"},     j = 4,     while j < len(lista):,         if lista[j].strip().startswith("if") or lista[j].strip().startswith(,             cantidad_elementos["if"] += 1,         elif lista[j].strip().startswith("while"):,             cantidad_elementos["while"] += 1,         elif lista[j].strip().startswith("for"):,             cantidad_elementos["for"] += 1,         elif lista[j].strip().startswith("return"):,             cantidad_elementos["returns"] += 1,         elif lista[j].strip().startswith("break"):,             cantidad_elementos["break"] += 1,         elif lista[j].strip().startswith("exit"):,             cantidad_elementos["exit"] += 1,         if lista_comentarios[2].strip().startswith("[Ayuda:"):,             cantidad_elementos["ayuda"] = "SI",         j = j + 1,     return cantidad_elementos
contar_invocaciones,(nombre_funcion, lista),Panel_General.py,    i = 0,     invocaciones_dict = {"Cantidad de Invocaciones": 0},     while i < len(lista):,         j = 4,         while j < len(lista[i]):,             if nombre_funcion in lista[i][j]:,                 invocaciones_dict["Cantidad de Invocaciones"] += 1,             j = j + 1,         i = i + 1,     return invocaciones_dict
organizar_datos,(lista),Panel_General.py,    j = 0,     primeros_3 = {"Nombre de Funcion": lista[0] + lista[2], "Cantidad de Parametros": lista[1].count('('),,                   "Cantidad de Lineas": len(lista) - 3},     return primeros_3
panel_principal,(),Panel_General.py,    with open('comentarios.csv', 'r') as comentarios:,         reader = csv.reader(comentarios),         lista_de_comentarios = [],         for fila in reader:,             lista_de_comentarios.append(fila),     with open('fuente_unico.csv', 'r') as file:,         reader = csv.reader(file),         lista_completa = [],         lista_final = {},         datos = [],         for row in reader:,             lista_completa.append(row),         lista1 = lista_completa,         i = 0,         while i < len(lista_completa):,             lista_final_1 = organizar_datos(lista_completa[i]),             lista_final_2 = contar_invocaciones(lista_completa[i][0], lista_completa),             lista_final_3 = contar_elementos_varios(lista_completa[i], lista_de_comentarios[i]),             lista_final.update(lista_final_1),             lista_final.update(lista_final_2),             lista_final.update(lista_final_3),             datos.append(lista_final),             lista_final = {},             i = i + 1, ,     header = datos[0].keys(),     rows = [x.values() for x in datos],     print(tabulate.tabulate(rows, header))
