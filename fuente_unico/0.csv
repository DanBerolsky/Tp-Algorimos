abro_ar,(archivo),m_generar_archivos_csv.py,    , , ,     with open(archivo, encoding="utf8") as archivo_completo: ,        ,         return leer(archivo_completo)
archivo_participacion_txt ,(agrego),Informacion_por_desarrollador.py,
armar_csv_comentarios,(lista_cuerpo,nombre_funcion, modulo),m_generar_archivos_csv.py,    ,     nombre_archivo = 'comentarios.csv',     datos_comentarios = {},     lista = lista_cuerpo,     lineas_multiples = lista_comentarios(lista),     ,     if not resto:,         lineas_comentadas = lineas_multiples ,     else:,         lineas_comentadas = lineas_multiples + resto,     ,     nombre_autor,nombre_ayuda = autor_ayuda(lineas_multiples),     ,     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,             ,     ,     return cuerpo_sin_comentarios ,nombre_autor,nombre_ayuda,resto
armar_csv_funciones,(archivo),m_generar_archivos_csv.py,    ,     ,     nombre_archivo = "fuente_unico.csv",     datos = {},     ,     ,     modulos = abro_ar(archivo),     ultima_linea_indentada = None,     lista_modulos_comentarios = [[]],     for modulo in modulos:,         lineas = abro_ar(modulo),         contador_def = 0,         datos_comentarios = {},         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) + 1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = "(" + funcion.split('(')[1].lstrip().split(')')[0] + ")",                 contador_def += 1,                 ,                 if contador_def >1:,                     linea_return = linea,                     index_final = lineas.index(linea_return),                     cuerpo = lineas[index_inicial_anterior:index_final],                     cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                     datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                     datos[nombre_funcion_anterior] = {"Parametros de la funcion":parametros_anterior,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                     contador_def = 1,                 ,             if linea.strip().startswith("return "):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                 datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                 datos[nombre_funcion] = {"Parametros de la funcion":parametros,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                 contador_def = 0, ,             if linea.startswith("    "):,                 ultima_linea_indentada = linea,                 ,             if linea == lineas[len(lineas)-1]:,                 index_final = lineas.index(ultima_linea_indentada) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                 datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                 datos[nombre_funcion] = {"Parametros de la funcion":parametros,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                 ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial_anterior = lineas.index(funcion) + 1,                 nombre_funcion_anterior = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros_anterior = funcion.split('(')[1].lstrip().split(')')[0], ,         funciones_alfabeto = ordenar_alfabeticamente(datos),         comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),         lista_modulos_comentarios[0].append(modulo_csv.armo_csv(comentarios_alfabeto,'comentarios.csv',modulo, lista_modulos_comentarios)),     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo, modulo, lista_modulos_comentarios) 
autor_ayuda,(lista),m_generar_archivos_csv.py,    nombre_autor = "",     for i in lista:,         if 'Autor:' in i:,             nombre_autor = i.split('"""')[1].lstrip(),     b = ''.join(lista)        ,     nombre_ayuda = b.replace(nombre_autor,'').replace('"""',''),     return nombre_autor, nombre_ayuda
cantidad_de_espacios,(nombre_funcion),Informacion_por_desarrollador.py,    ,   ,     if 8 + len(nombre_funcion)<33:,         ,         espacios = -1 * (8 + len(nombre_funcion) - 33),     ,     else:,         ,         espacios = 2, ,     return espacios  
capturo_datos,(),Informacion_por_desarrollador.py,    , ,     informacion_deseada = {},     ,     lineas_totales_por_autor = {},     ,     total_linea = 0, ,     with open("comentarios.csv","rt") as archivo_comentarios:,         ,         linea_archivos_comentarios = archivo_comentarios.readline(),         ,         while linea_archivos_comentarios != "":,             ,             linea_a_lista_de_datos = linea_archivos_comentarios.split(","),             ,             nombre_funcion = linea_a_lista_de_datos[0],             ,             autor = linea_a_lista_de_datos[1].lstrip("[Autor:").rstrip("]"),             ,             informacion_deseada[nombre_funcion] = {"Autor":autor,"Lineas_por_funcion":None}, ,             linea_archivos_comentarios = archivo_comentarios.readline(), ,     with open ("fuente_unico.csv","rt") as archivo_fuente_unico:,         ,         linea_archivos_fuente_unico = archivo_fuente_unico.readline(),         ,         while linea_archivos_fuente_unico != "":,             ,             linea_a_lista_de_datos = linea_archivos_fuente_unico.split(","),             ,             contador_lineas = 0, ,             funcion_actual = linea_a_lista_de_datos[0],             ,             total_linea += len(linea_a_lista_de_datos[3:]),             ,             contador_lineas = len(linea_a_lista_de_datos[3:]),             ,             for clave in informacion_deseada.keys():,                 ,                 if clave == funcion_actual:,                     informacion_deseada[clave]["Lineas_por_funcion"] = contador_lineas,                     ,                     if informacion_deseada[clave]["Autor"] in lineas_totales_por_autor.keys():,                         lineas_totales_por_autor[informacion_deseada[clave]["Autor"]] += contador_lineas,                     ,                     else:,                         ,                         lineas_totales_por_autor[informacion_deseada[clave]["Autor"]] = contador_lineas, ,             linea_archivos_fuente_unico = archivo_fuente_unico.readline(), ,     porcentajes = {},     ,     for clave in lineas_totales_por_autor.keys():,         ,         porcentajes[clave] = int((lineas_totales_por_autor[clave]/total_linea)*100), ,     datos_finales = sorted(informacion_deseada.items(), key = lambda autor: autor[1]["Autor"]),     ,     return datos_finales,porcentajes
leer,(archivo),m_generar_archivos_csv.py,    ,     ,     lineas = [linea.rstrip('\n') for linea in archivo],     ,     return lineas
lista_comentarios,(lista),m_generar_archivos_csv.py,    ,     index_lista = [],     comentarios_triples = [],     for i in lista:,         if i.strip().startswith('"""'):,             index = lista.index(i),             index_lista.append(index),     if index_lista and len(index_lista) > 1:,         inicial = index_lista[0],         final = index_lista[1] +1,         comentarios_triples = lista[inicial:final],         ,     return comentarios_triples
ordenar_alfabeticamente,(diccionario),m_generar_archivos_csv.py,    ,     ,     return sorted(diccionario.items(), key = lambda clave: clave[0])
participacion_info ,lista_tuplas_funciones_autor_lineas_por_autor, diccionario_de_porcentajes_por_autores,Informacion_por_desarrollador.py,,     autor_anterior = None,     ,     titulo = "\n\tInforme de Desarrollo Por Autor\n",     muestro_salida.impresiones(titulo),     ,     archivo_participacion_txt(titulo),     ,     ,     for indice in range(len(lista_tuplas_funciones_autor_lineas_por_autor)):     ,         ,         nombre_funcion = lista_tuplas_funciones_autor_lineas_por_autor[indice][0],         ,         autor = lista_tuplas_funciones_autor_lineas_por_autor[indice][1]["Autor"], ,         lineas_funcion = lista_tuplas_funciones_autor_lineas_por_autor[indice][1]["Lineas_por_funcion"], ,         porcentaje = diccionario_de_porcentajes_por_autores[autor], ,         if autor_anterior == None:,             ,             s1 = "Autor: " + autor + "\n\n\tFuncion" + 16*" " + "Lineas"+"\n\t" + 33 * "-",             muestro_salida.impresiones(s1),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s2 = "\t" + nombre_funcion + (" " * espacios) + str(lineas_funcion),             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n" + s2),             ,             contador_lineas_totales = 0,             ,             contador_funciones_totales = 0,             ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,             autor_anterior = autor, ,         elif autor_anterior != autor:,             ,             s1 = "\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje_anterior)+"%\n",             muestro_salida.impresiones(s1),             ,             s2 = "Autor: " + autor +"\n\n\tFuncion"+16*" "+"Lineas\n\t" + 33*"-",             muestro_salida.impresiones(s2),             ,             espacios = cantidad_de_espacios(nombre_funcion),             s3 = "\t" + nombre_funcion + (" " * espacios) + str(lineas_funcion),             muestro_salida.impresiones(s3),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n" + s2),             archivo_participacion_txt("\n" + s3),             , ,             contador_funciones = 0, ,             contador_lineas = 0, ,             porcentaje_anterior = porcentaje, ,         else:,         ,             espacios = cantidad_de_espacios(nombre_funcion),             s1 = "\t" + nombre_funcion + " "*espacios + str(lineas_funcion),             muestro_salida.impresiones(s1),             ,             archivo_participacion_txt("\n" + s1),             , ,         contador_lineas_totales += int(lineas_funcion), ,         contador_funciones_totales += 1, ,         contador_funciones += 1, ,         contador_lineas += int(lineas_funcion), ,         autor_anterior = autor, ,         if indice == len(lista_tuplas_funciones_autor_lineas_por_autor)-1 :,             ,             s1 = "\t"+str(contador_funciones) + " Funciones - Lineas\t " + str(contador_lineas) + "  " + str(porcentaje)+"%\n\n",             muestro_salida.impresiones(s1),             s2 = "Total: "+ str(contador_funciones_totales) + " Funciones - lineas\t " + str(contador_lineas_totales)+"\n",             muestro_salida.impresiones(s2),             ,             archivo_participacion_txt("\n" + s1),             archivo_participacion_txt("\n" + s2)            ,     ,     , 
