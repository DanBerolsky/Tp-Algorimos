abro_ar,(archivo),m_generar_archivos_csv.py,    , , ,     with open(archivo, encoding="utf8") as archivo_completo: ,        ,         return leer(archivo_completo)
archivo_analizador,(texto),quien_invoca.py,,     with open ("analizador.txt","a") as archivo_generado:,         ,         archivo_generado.write(texto), ,     return None
armar_csv_comentarios,(lista_cuerpo,nombre_funcion, modulo),m_generar_archivos_csv.py,    ,     nombre_archivo = 'comentarios.csv',     datos_comentarios = {},     lista = lista_cuerpo,     lineas_multiples = lista_comentarios(lista),     ,     if not resto:,         lineas_comentadas = lineas_multiples ,     else:,         lineas_comentadas = lineas_multiples + resto,     ,     nombre_autor,nombre_ayuda = autor_ayuda(lineas_multiples),     ,     cuerpo_sin_comentarios = [x for x in lista if x not in lineas_comentadas],     ,             ,     ,     return cuerpo_sin_comentarios ,nombre_autor,nombre_ayuda,resto
armar_csv_funciones,(archivo),m_generar_archivos_csv.py,    ,     ,     nombre_archivo = "fuente_unico.csv",     datos = {},     ,     ,     modulos = abro_ar(archivo),     ultima_linea_indentada = None,     lista_modulos_comentarios = [[]],     for modulo in modulos:,         lineas = abro_ar(modulo),         contador_def = 0,         datos_comentarios = {},         for linea in lineas:,                   ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial = lineas.index(funcion) + 1,                 nombre_funcion = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros = "(" + funcion.split('(')[1].lstrip().split(')')[0] + ")",                 contador_def += 1,                 ,                 if contador_def >1:,                     linea_return = linea,                     index_final = lineas.index(linea_return),                     cuerpo = lineas[index_inicial_anterior:index_final],                     cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                     datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                     datos[nombre_funcion_anterior] = {"Parametros de la funcion":parametros_anterior,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                     contador_def = 1,                 ,             if linea.strip().startswith("return "):,                 linea_return = linea,                 index_final = lineas.index(linea_return) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                 datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                 datos[nombre_funcion] = {"Parametros de la funcion":parametros,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                 contador_def = 0, ,             if linea.startswith("    "):,                 ultima_linea_indentada = linea,                 ,             if linea == lineas[len(lineas)-1]:,                 index_final = lineas.index(ultima_linea_indentada) + 1,                 cuerpo = lineas[index_inicial:index_final],                 cuerpo_sin_comment,nombre_autor,nombre_ayuda,resto = armar_csv_comentarios(cuerpo,nombre_funcion, modulo),                 datos_comentarios[nombre_funcion] = {"Nombre del autor":nombre_autor,"informacion de ayuda":nombre_ayuda,"Resto de lineas comentadas":resto},                 datos[nombre_funcion] = {"Parametros de la funcion":parametros,"Nombre del modulo":modulo,"Cuerpo de la funcion":cuerpo_sin_comment},                 ,             if linea.startswith('def '):,                 funcion = linea,                 index_inicial_anterior = lineas.index(funcion) + 1,                 nombre_funcion_anterior = funcion.split('def ')[1].lstrip().split('(')[0],                 parametros_anterior = funcion.split('(')[1].lstrip().split(')')[0], ,         funciones_alfabeto = ordenar_alfabeticamente(datos),         comentarios_alfabeto = ordenar_alfabeticamente(datos_comentarios),         lista_modulos_comentarios[0].append(modulo_csv.armo_csv(comentarios_alfabeto,'comentarios.csv',modulo, lista_modulos_comentarios)),     return modulo_csv.armo_csv(funciones_alfabeto,nombre_archivo, modulo, lista_modulos_comentarios) 
armar_tabla,(),quien_invoca.py,    ,     lista_funciones , dicc_datos = quien_invoca_a_quien(),     enum_datos = list(enumerate(lista_funciones,1)),     ,     posicion = primer_item_lista(enum_datos),     ,     numeros = ','.join(map(str, posicion)),     ,     maximo,titulo = formato_titulo(posicion),     lista_total = []   ,     vacio = " ",     for numero,funcion in enum_datos:,         ,         conteo = 1,         ,         primer_campo = str(numero) + " " + funcion ,         ,         lista_a_imprimir = [primer_campo.ljust(32)],         ,         while conteo <= maximo:,             ,             lista_a_imprimir.append(vacio),             conteo += 1,         ,             ,         for clave, valor in dicc_datos.items():,             for lista in valor:,                 if funcion in lista:,                     numero_invocada =   [l for l in enum_datos if clave in l],                     funcion_a_invocar = numero_invocada[0][0],                     lista_a_imprimir[funcion_a_invocar] = 'X',                     ,         if funcion  in dicc_datos.keys():,             ,             dicc_informacion = dicc_datos[funcion],             lista_modificar = [],             for i,j in dicc_informacion:,                 ,                 numero_invocada =   [l for l in enum_datos if i in l] ,                 ,                 funcion_a_invocar = numero_invocada[0][0],                 ,                 lista_a_imprimir[funcion_a_invocar] = j,                 ,        ,         lista_total.append(lista_a_imprimir)        ,     ,     ,     lista_totales_numero = borrar_un_valor_lista(lista_total,vacio),     lista_totales_numero_2 = borrar_un_valor_lista(lista_totales_numero, 'X')   ,     borrar_primer_indice(lista_totales_numero_2),     ,     totales = sumar_totales(lista_totales_numero_2)  ,    ,     ,     return titulo, lista_total, totales
autor_ayuda,(lista),m_generar_archivos_csv.py,    nombre_autor = "",     for i in lista:,         if 'Autor:' in i:,             nombre_autor = i.split('"""')[1].lstrip(),     b = ''.join(lista)        ,     nombre_ayuda = b.replace(nombre_autor,'').replace('"""',''),     return nombre_autor, nombre_ayuda
borrar_primer_indice,(lista),quien_invoca.py,    ,     for i in lista:,         del i[0]          ,     return lista
borrar_un_valor_lista,(lista,valor),quien_invoca.py,    lista_valor =[list(map(lambda x: x if x!= valor else 0, i)) for i in lista],     return lista_valor
correcto_espaciado,(lista),quien_invoca.py,
formato_cuerpo,(lista),quien_invoca.py,    for i in lista:,         i = formato_tabla(correcto_espaciado(i)),         print(i),         i = i + '\n',         archivo_analizador(i),     return i
formato_tabla,(lista),quien_invoca.py,    ,     str_nuevo = ' | '.join(map(str, lista)),     return str_nuevo
formato_titulo,(lista),quien_invoca.py,    maximo =max(lista),     titulo = lista,     titulo.insert(0,"Funciones                       "),     ,     return maximo,titulo
la_tabla,(),quien_invoca.py,
leer,(archivo),m_generar_archivos_csv.py,    ,     ,     lineas = [linea.rstrip('\n') for linea in archivo],     ,     return lineas
leer_csv,(nombre_csv),quien_invoca.py,        ,     dicc_csv = {},     ,     for linea in open(nombre_csv, 'r').readlines():,         linea = linea.strip().split(','),         dicc_csv[linea[0]] = linea[1:] ,     return dicc_csv
lista_comentarios,(lista),m_generar_archivos_csv.py,    ,     index_lista = [],     comentarios_triples = [],     for i in lista:,         if i.strip().startswith('"""'):,             index = lista.index(i),             index_lista.append(index),     if index_lista:,         inicial = index_lista[0],         final = index_lista[1] +1,         comentarios_triples = lista[inicial:final],         ,     return comentarios_triples
ordenar_alfabeticamente,(diccionario),m_generar_archivos_csv.py,    ,     ,     return sorted(diccionario.items(), key = lambda clave: clave[0])
primer_item_lista,(lista),quien_invoca.py,    ,     return [item[0] for item in lista] 
quien_invoca_a_quien,(),quien_invoca.py,    diccionario_csv = leer_csv(fuente),     nombre_funcion = [],     resultado = {}, ,     for fila in diccionario_csv:,         nombre_funcion.append(fila),         ,     for fila in diccionario_csv.items():,         clave = fila[0],         cuerpo = fila[1][2:],         ,         for funcion in nombre_funcion:,             ,             ,             funciones_en_cuerpo = [s for s in cuerpo if funcion in s],             ,             contador = len(funciones_en_cuerpo),             lista_de_invocacion = [funcion,contador],             ,             if contador > 0:,                 ,                 if clave in resultado:,                     resultado[clave].append(lista_de_invocacion),                     ,                 else:    ,                     resultado[clave] = [lista_de_invocacion],                     ,     return nombre_funcion, resultado
remover_ceros,(lista),quien_invoca.py,    reemplazo =[' ' if i==0 else i for i in lista],     return reemplazo
sumar_totales,(lista),quien_invoca.py,    totales = []  ,     for columna_matriz in enumerate(lista[0]):,         suma_columna = sum([x[columna_matriz[0]] for x in lista]),         totales.append(suma_columna),     totales.insert(0,"Total Invocaciones              "),     return totales
